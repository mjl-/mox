{
	"Name": "Admin",
	"Docs": "Admin exports web API functions for the admin web interface. All its methods are\nexported under api/. Function calls require valid HTTP Authentication\ncredentials of a user.",
	"Functions": [
		{
			"Name": "LoginPrep",
			"Docs": "LoginPrep returns a login token, and also sets it as cookie. Both must be\npresent in the call to Login.",
			"Params": [],
			"Returns": [
				{
					"Name": "r0",
					"Typewords": [
						"string"
					]
				}
			]
		},
		{
			"Name": "Login",
			"Docs": "Login returns a session token for the credentials, or fails with error code\n\"user:badLogin\". Call LoginPrep to get a loginToken.",
			"Params": [
				{
					"Name": "loginToken",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": [
				{
					"Name": "r0",
					"Typewords": [
						"CSRFToken"
					]
				}
			]
		},
		{
			"Name": "Logout",
			"Docs": "Logout invalidates the session token.",
			"Params": [],
			"Returns": []
		},
		{
			"Name": "CheckDomain",
			"Docs": "CheckDomain checks the configuration for the domain, such as MX, SMTP STARTTLS,\nSPF, DKIM, DMARC, TLSRPT, MTASTS, autoconfig, autodiscover.",
			"Params": [
				{
					"Name": "domainName",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": [
				{
					"Name": "r",
					"Typewords": [
						"CheckResult"
					]
				}
			]
		},
		{
			"Name": "Domains",
			"Docs": "Domains returns all configured domain names, in UTF-8 for IDNA domains.",
			"Params": [],
			"Returns": [
				{
					"Name": "r0",
					"Typewords": [
						"[]",
						"Domain"
					]
				}
			]
		},
		{
			"Name": "Domain",
			"Docs": "Domain returns the dns domain for a (potentially unicode as IDNA) domain name.",
			"Params": [
				{
					"Name": "domain",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": [
				{
					"Name": "r0",
					"Typewords": [
						"Domain"
					]
				}
			]
		},
		{
			"Name": "ParseDomain",
			"Docs": "ParseDomain parses a domain, possibly an IDNA domain.",
			"Params": [
				{
					"Name": "domain",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": [
				{
					"Name": "r0",
					"Typewords": [
						"Domain"
					]
				}
			]
		},
		{
			"Name": "DomainConfig",
			"Docs": "DomainConfig returns the configuration for a domain.",
			"Params": [
				{
					"Name": "domain",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": [
				{
					"Name": "r0",
					"Typewords": [
						"ConfigDomain"
					]
				}
			]
		},
		{
			"Name": "DomainLocalparts",
			"Docs": "DomainLocalparts returns the encoded localparts and accounts configured in domain.",
			"Params": [
				{
					"Name": "domain",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": [
				{
					"Name": "localpartAccounts",
					"Typewords": [
						"{}",
						"string"
					]
				},
				{
					"Name": "localpartAliases",
					"Typewords": [
						"{}",
						"Alias"
					]
				}
			]
		},
		{
			"Name": "Accounts",
			"Docs": "Accounts returns the names of all configured accounts.",
			"Params": [],
			"Returns": [
				{
					"Name": "r0",
					"Typewords": [
						"[]",
						"string"
					]
				}
			]
		},
		{
			"Name": "Account",
			"Docs": "Account returns the parsed configuration of an account.",
			"Params": [
				{
					"Name": "account",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": [
				{
					"Name": "accountConfig",
					"Typewords": [
						"Account"
					]
				},
				{
					"Name": "diskUsage",
					"Typewords": [
						"int64"
					]
				}
			]
		},
		{
			"Name": "ConfigFiles",
			"Docs": "ConfigFiles returns the paths and contents of the static and dynamic configuration files.",
			"Params": [],
			"Returns": [
				{
					"Name": "staticPath",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "dynamicPath",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "static",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "dynamic",
					"Typewords": [
						"string"
					]
				}
			]
		},
		{
			"Name": "MTASTSPolicies",
			"Docs": "MTASTSPolicies returns all mtasts policies from the cache.",
			"Params": [],
			"Returns": [
				{
					"Name": "records",
					"Typewords": [
						"[]",
						"PolicyRecord"
					]
				}
			]
		},
		{
			"Name": "TLSReports",
			"Docs": "TLSReports returns TLS reports overlapping with period start/end, for the given\npolicy domain (or all domains if empty). The reports are sorted first by period\nend (most recent first), then by policy domain.",
			"Params": [
				{
					"Name": "start",
					"Typewords": [
						"timestamp"
					]
				},
				{
					"Name": "end",
					"Typewords": [
						"timestamp"
					]
				},
				{
					"Name": "policyDomain",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": [
				{
					"Name": "reports",
					"Typewords": [
						"[]",
						"TLSReportRecord"
					]
				}
			]
		},
		{
			"Name": "TLSReportID",
			"Docs": "TLSReportID returns a single TLS report.",
			"Params": [
				{
					"Name": "domain",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "reportID",
					"Typewords": [
						"int64"
					]
				}
			],
			"Returns": [
				{
					"Name": "r0",
					"Typewords": [
						"TLSReportRecord"
					]
				}
			]
		},
		{
			"Name": "TLSRPTSummaries",
			"Docs": "TLSRPTSummaries returns a summary of received TLS reports overlapping with\nperiod start/end for one or all domains (when domain is empty).\nThe returned summaries are ordered by domain name.",
			"Params": [
				{
					"Name": "start",
					"Typewords": [
						"timestamp"
					]
				},
				{
					"Name": "end",
					"Typewords": [
						"timestamp"
					]
				},
				{
					"Name": "policyDomain",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": [
				{
					"Name": "domainSummaries",
					"Typewords": [
						"[]",
						"TLSRPTSummary"
					]
				}
			]
		},
		{
			"Name": "DMARCReports",
			"Docs": "DMARCReports returns DMARC reports overlapping with period start/end, for the\ngiven domain (or all domains if empty). The reports are sorted first by period\nend (most recent first), then by domain.",
			"Params": [
				{
					"Name": "start",
					"Typewords": [
						"timestamp"
					]
				},
				{
					"Name": "end",
					"Typewords": [
						"timestamp"
					]
				},
				{
					"Name": "domain",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": [
				{
					"Name": "reports",
					"Typewords": [
						"[]",
						"DomainFeedback"
					]
				}
			]
		},
		{
			"Name": "DMARCReportID",
			"Docs": "DMARCReportID returns a single DMARC report.",
			"Params": [
				{
					"Name": "domain",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "reportID",
					"Typewords": [
						"int64"
					]
				}
			],
			"Returns": [
				{
					"Name": "report",
					"Typewords": [
						"DomainFeedback"
					]
				}
			]
		},
		{
			"Name": "DMARCSummaries",
			"Docs": "DMARCSummaries returns a summary of received DMARC reports overlapping with\nperiod start/end for one or all domains (when domain is empty).\nThe returned summaries are ordered by domain name.",
			"Params": [
				{
					"Name": "start",
					"Typewords": [
						"timestamp"
					]
				},
				{
					"Name": "end",
					"Typewords": [
						"timestamp"
					]
				},
				{
					"Name": "domain",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": [
				{
					"Name": "domainSummaries",
					"Typewords": [
						"[]",
						"DMARCSummary"
					]
				}
			]
		},
		{
			"Name": "LookupIP",
			"Docs": "LookupIP does a reverse lookup of ip.",
			"Params": [
				{
					"Name": "ip",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": [
				{
					"Name": "r0",
					"Typewords": [
						"Reverse"
					]
				}
			]
		},
		{
			"Name": "DNSBLStatus",
			"Docs": "DNSBLStatus returns the IPs from which outgoing connections may be made and\ntheir current status in DNSBLs that are configured. The IPs are typically the\nconfigured listen IPs, or otherwise IPs on the machines network interfaces, with\ninternal/private IPs removed.\n\nThe returned value maps IPs to per DNSBL statuses, where \"pass\" means not listed and\nanything else is an error string, e.g. \"fail: ...\" or \"temperror: ...\".",
			"Params": [],
			"Returns": [
				{
					"Name": "results",
					"Typewords": [
						"{}",
						"{}",
						"string"
					]
				},
				{
					"Name": "using",
					"Typewords": [
						"[]",
						"Domain"
					]
				},
				{
					"Name": "monitoring",
					"Typewords": [
						"[]",
						"Domain"
					]
				}
			]
		},
		{
			"Name": "MonitorDNSBLsSave",
			"Docs": "",
			"Params": [
				{
					"Name": "text",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "DomainRecords",
			"Docs": "DomainRecords returns lines describing DNS records that should exist for the\nconfigured domain.",
			"Params": [
				{
					"Name": "domain",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": [
				{
					"Name": "r0",
					"Typewords": [
						"[]",
						"string"
					]
				}
			]
		},
		{
			"Name": "DomainAdd",
			"Docs": "DomainAdd adds a new domain and reloads the configuration.",
			"Params": [
				{
					"Name": "domain",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "accountName",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "localpart",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "DomainRemove",
			"Docs": "DomainRemove removes an existing domain and reloads the configuration.",
			"Params": [
				{
					"Name": "domain",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "AccountAdd",
			"Docs": "AccountAdd adds existing a new account, with an initial email address, and\nreloads the configuration.",
			"Params": [
				{
					"Name": "accountName",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "address",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "AccountRemove",
			"Docs": "AccountRemove removes an existing account and reloads the configuration.",
			"Params": [
				{
					"Name": "accountName",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "AddressAdd",
			"Docs": "AddressAdd adds a new address to the account, which must already exist.",
			"Params": [
				{
					"Name": "address",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "accountName",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "AddressRemove",
			"Docs": "AddressRemove removes an existing address.",
			"Params": [
				{
					"Name": "address",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "SetPassword",
			"Docs": "SetPassword saves a new password for an account, invalidating the previous password.\nSessions are not interrupted, and will keep working. New login attempts must use the new password.\nPassword must be at least 8 characters.",
			"Params": [
				{
					"Name": "accountName",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "password",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "AccountSettingsSave",
			"Docs": "AccountSettingsSave set new settings for an account that only an admin can set.",
			"Params": [
				{
					"Name": "accountName",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "maxOutgoingMessagesPerDay",
					"Typewords": [
						"int32"
					]
				},
				{
					"Name": "maxFirstTimeRecipientsPerDay",
					"Typewords": [
						"int32"
					]
				},
				{
					"Name": "maxMsgSize",
					"Typewords": [
						"int64"
					]
				},
				{
					"Name": "firstTimeSenderDelay",
					"Typewords": [
						"bool"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "ClientConfigsDomain",
			"Docs": "ClientConfigsDomain returns configurations for email clients, IMAP and\nSubmission (SMTP) for the domain.",
			"Params": [
				{
					"Name": "domain",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": [
				{
					"Name": "r0",
					"Typewords": [
						"ClientConfigs"
					]
				}
			]
		},
		{
			"Name": "QueueSize",
			"Docs": "QueueSize returns the number of messages currently in the outgoing queue.",
			"Params": [],
			"Returns": [
				{
					"Name": "r0",
					"Typewords": [
						"int32"
					]
				}
			]
		},
		{
			"Name": "QueueHoldRuleList",
			"Docs": "QueueHoldRuleList lists the hold rules.",
			"Params": [],
			"Returns": [
				{
					"Name": "r0",
					"Typewords": [
						"[]",
						"HoldRule"
					]
				}
			]
		},
		{
			"Name": "QueueHoldRuleAdd",
			"Docs": "QueueHoldRuleAdd adds a hold rule. Newly submitted and existing messages\nmatching the hold rule will be marked \"on hold\".",
			"Params": [
				{
					"Name": "hr",
					"Typewords": [
						"HoldRule"
					]
				}
			],
			"Returns": [
				{
					"Name": "r0",
					"Typewords": [
						"HoldRule"
					]
				}
			]
		},
		{
			"Name": "QueueHoldRuleRemove",
			"Docs": "QueueHoldRuleRemove removes a hold rule. The Hold field of messages in\nthe queue are not changed.",
			"Params": [
				{
					"Name": "holdRuleID",
					"Typewords": [
						"int64"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "QueueList",
			"Docs": "QueueList returns the messages currently in the outgoing queue.",
			"Params": [
				{
					"Name": "filter",
					"Typewords": [
						"Filter"
					]
				},
				{
					"Name": "sort",
					"Typewords": [
						"Sort"
					]
				}
			],
			"Returns": [
				{
					"Name": "r0",
					"Typewords": [
						"[]",
						"Msg"
					]
				}
			]
		},
		{
			"Name": "QueueNextAttemptSet",
			"Docs": "QueueNextAttemptSet sets a new time for next delivery attempt of matching\nmessages from the queue.",
			"Params": [
				{
					"Name": "filter",
					"Typewords": [
						"Filter"
					]
				},
				{
					"Name": "minutes",
					"Typewords": [
						"int32"
					]
				}
			],
			"Returns": [
				{
					"Name": "affected",
					"Typewords": [
						"int32"
					]
				}
			]
		},
		{
			"Name": "QueueNextAttemptAdd",
			"Docs": "QueueNextAttemptAdd adds a duration to the time of next delivery attempt of\nmatching messages from the queue.",
			"Params": [
				{
					"Name": "filter",
					"Typewords": [
						"Filter"
					]
				},
				{
					"Name": "minutes",
					"Typewords": [
						"int32"
					]
				}
			],
			"Returns": [
				{
					"Name": "affected",
					"Typewords": [
						"int32"
					]
				}
			]
		},
		{
			"Name": "QueueHoldSet",
			"Docs": "QueueHoldSet sets the Hold field of matching messages in the queue.",
			"Params": [
				{
					"Name": "filter",
					"Typewords": [
						"Filter"
					]
				},
				{
					"Name": "onHold",
					"Typewords": [
						"bool"
					]
				}
			],
			"Returns": [
				{
					"Name": "affected",
					"Typewords": [
						"int32"
					]
				}
			]
		},
		{
			"Name": "QueueFail",
			"Docs": "QueueFail fails delivery for matching messages, causing DSNs to be sent.",
			"Params": [
				{
					"Name": "filter",
					"Typewords": [
						"Filter"
					]
				}
			],
			"Returns": [
				{
					"Name": "affected",
					"Typewords": [
						"int32"
					]
				}
			]
		},
		{
			"Name": "QueueDrop",
			"Docs": "QueueDrop removes matching messages from the queue.",
			"Params": [
				{
					"Name": "filter",
					"Typewords": [
						"Filter"
					]
				}
			],
			"Returns": [
				{
					"Name": "affected",
					"Typewords": [
						"int32"
					]
				}
			]
		},
		{
			"Name": "QueueRequireTLSSet",
			"Docs": "QueueRequireTLSSet updates the requiretls field for matching messages in the\nqueue, to be used for the next delivery.",
			"Params": [
				{
					"Name": "filter",
					"Typewords": [
						"Filter"
					]
				},
				{
					"Name": "requireTLS",
					"Typewords": [
						"nullable",
						"bool"
					]
				}
			],
			"Returns": [
				{
					"Name": "affected",
					"Typewords": [
						"int32"
					]
				}
			]
		},
		{
			"Name": "QueueTransportSet",
			"Docs": "QueueTransportSet initiates delivery of a message from the queue and sets the transport\nto use for delivery.",
			"Params": [
				{
					"Name": "filter",
					"Typewords": [
						"Filter"
					]
				},
				{
					"Name": "transport",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": [
				{
					"Name": "affected",
					"Typewords": [
						"int32"
					]
				}
			]
		},
		{
			"Name": "RetiredList",
			"Docs": "RetiredList returns messages retired from the queue (delivery could\nhave succeeded or failed).",
			"Params": [
				{
					"Name": "filter",
					"Typewords": [
						"RetiredFilter"
					]
				},
				{
					"Name": "sort",
					"Typewords": [
						"RetiredSort"
					]
				}
			],
			"Returns": [
				{
					"Name": "r0",
					"Typewords": [
						"[]",
						"MsgRetired"
					]
				}
			]
		},
		{
			"Name": "HookQueueSize",
			"Docs": "HookQueueSize returns the number of webhooks still to be delivered.",
			"Params": [],
			"Returns": [
				{
					"Name": "r0",
					"Typewords": [
						"int32"
					]
				}
			]
		},
		{
			"Name": "HookList",
			"Docs": "HookList lists webhooks still to be delivered.",
			"Params": [
				{
					"Name": "filter",
					"Typewords": [
						"HookFilter"
					]
				},
				{
					"Name": "sort",
					"Typewords": [
						"HookSort"
					]
				}
			],
			"Returns": [
				{
					"Name": "r0",
					"Typewords": [
						"[]",
						"Hook"
					]
				}
			]
		},
		{
			"Name": "HookNextAttemptSet",
			"Docs": "HookNextAttemptSet sets a new time for next delivery attempt of matching\nhooks from the queue.",
			"Params": [
				{
					"Name": "filter",
					"Typewords": [
						"HookFilter"
					]
				},
				{
					"Name": "minutes",
					"Typewords": [
						"int32"
					]
				}
			],
			"Returns": [
				{
					"Name": "affected",
					"Typewords": [
						"int32"
					]
				}
			]
		},
		{
			"Name": "HookNextAttemptAdd",
			"Docs": "HookNextAttemptAdd adds a duration to the time of next delivery attempt of\nmatching hooks from the queue.",
			"Params": [
				{
					"Name": "filter",
					"Typewords": [
						"HookFilter"
					]
				},
				{
					"Name": "minutes",
					"Typewords": [
						"int32"
					]
				}
			],
			"Returns": [
				{
					"Name": "affected",
					"Typewords": [
						"int32"
					]
				}
			]
		},
		{
			"Name": "HookRetiredList",
			"Docs": "HookRetiredList lists retired webhooks.",
			"Params": [
				{
					"Name": "filter",
					"Typewords": [
						"HookRetiredFilter"
					]
				},
				{
					"Name": "sort",
					"Typewords": [
						"HookRetiredSort"
					]
				}
			],
			"Returns": [
				{
					"Name": "r0",
					"Typewords": [
						"[]",
						"HookRetired"
					]
				}
			]
		},
		{
			"Name": "HookCancel",
			"Docs": "HookCancel prevents further delivery attempts of matching webhooks.",
			"Params": [
				{
					"Name": "filter",
					"Typewords": [
						"HookFilter"
					]
				}
			],
			"Returns": [
				{
					"Name": "affected",
					"Typewords": [
						"int32"
					]
				}
			]
		},
		{
			"Name": "LogLevels",
			"Docs": "LogLevels returns the current log levels.",
			"Params": [],
			"Returns": [
				{
					"Name": "r0",
					"Typewords": [
						"{}",
						"string"
					]
				}
			]
		},
		{
			"Name": "LogLevelSet",
			"Docs": "LogLevelSet sets a log level for a package.",
			"Params": [
				{
					"Name": "pkg",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "levelStr",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "LogLevelRemove",
			"Docs": "LogLevelRemove removes a log level for a package, which cannot be the empty string.",
			"Params": [
				{
					"Name": "pkg",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "CheckUpdatesEnabled",
			"Docs": "CheckUpdatesEnabled returns whether checking for updates is enabled.",
			"Params": [],
			"Returns": [
				{
					"Name": "r0",
					"Typewords": [
						"bool"
					]
				}
			]
		},
		{
			"Name": "WebserverConfig",
			"Docs": "WebserverConfig returns the current webserver config",
			"Params": [],
			"Returns": [
				{
					"Name": "conf",
					"Typewords": [
						"WebserverConfig"
					]
				}
			]
		},
		{
			"Name": "WebserverConfigSave",
			"Docs": "WebserverConfigSave saves a new webserver config. If oldConf is not equal to\nthe current config, an error is returned.",
			"Params": [
				{
					"Name": "oldConf",
					"Typewords": [
						"WebserverConfig"
					]
				},
				{
					"Name": "newConf",
					"Typewords": [
						"WebserverConfig"
					]
				}
			],
			"Returns": [
				{
					"Name": "savedConf",
					"Typewords": [
						"WebserverConfig"
					]
				}
			]
		},
		{
			"Name": "Transports",
			"Docs": "Transports returns the configured transports, for sending email.",
			"Params": [],
			"Returns": [
				{
					"Name": "r0",
					"Typewords": [
						"{}",
						"Transport"
					]
				}
			]
		},
		{
			"Name": "DMARCEvaluationStats",
			"Docs": "DMARCEvaluationStats returns a map of all domains with evaluations to a count of\nthe evaluations and whether those evaluations will cause a report to be sent.",
			"Params": [],
			"Returns": [
				{
					"Name": "r0",
					"Typewords": [
						"{}",
						"EvaluationStat"
					]
				}
			]
		},
		{
			"Name": "DMARCEvaluationsDomain",
			"Docs": "DMARCEvaluationsDomain returns all evaluations for aggregate reports for the\ndomain, sorted from oldest to most recent.",
			"Params": [
				{
					"Name": "domain",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": [
				{
					"Name": "r0",
					"Typewords": [
						"Domain"
					]
				},
				{
					"Name": "r1",
					"Typewords": [
						"[]",
						"Evaluation"
					]
				}
			]
		},
		{
			"Name": "DMARCRemoveEvaluations",
			"Docs": "DMARCRemoveEvaluations removes evaluations for a domain.",
			"Params": [
				{
					"Name": "domain",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "DMARCSuppressAdd",
			"Docs": "DMARCSuppressAdd adds a reporting address to the suppress list. Outgoing\nreports will be suppressed for a period.",
			"Params": [
				{
					"Name": "reportingAddress",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "until",
					"Typewords": [
						"timestamp"
					]
				},
				{
					"Name": "comment",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "DMARCSuppressList",
			"Docs": "DMARCSuppressList returns all reporting addresses on the suppress list.",
			"Params": [],
			"Returns": [
				{
					"Name": "r0",
					"Typewords": [
						"[]",
						"SuppressAddress"
					]
				}
			]
		},
		{
			"Name": "DMARCSuppressRemove",
			"Docs": "DMARCSuppressRemove removes a reporting address record from the suppress list.",
			"Params": [
				{
					"Name": "id",
					"Typewords": [
						"int64"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "DMARCSuppressExtend",
			"Docs": "DMARCSuppressExtend updates the until field of a suppressed reporting address record.",
			"Params": [
				{
					"Name": "id",
					"Typewords": [
						"int64"
					]
				},
				{
					"Name": "until",
					"Typewords": [
						"timestamp"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "TLSRPTResults",
			"Docs": "TLSRPTResults returns all TLSRPT results in the database.",
			"Params": [],
			"Returns": [
				{
					"Name": "r0",
					"Typewords": [
						"[]",
						"TLSResult"
					]
				}
			]
		},
		{
			"Name": "TLSRPTResultsDomain",
			"Docs": "TLSRPTResultsPolicyDomain returns the TLS results for a domain.",
			"Params": [
				{
					"Name": "isRcptDom",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "policyDomain",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": [
				{
					"Name": "r0",
					"Typewords": [
						"Domain"
					]
				},
				{
					"Name": "r1",
					"Typewords": [
						"[]",
						"TLSResult"
					]
				}
			]
		},
		{
			"Name": "LookupTLSRPTRecord",
			"Docs": "LookupTLSRPTRecord looks up a TLSRPT record and returns the parsed form, original txt\nform from DNS, and error with the TLSRPT record as a string.",
			"Params": [
				{
					"Name": "domain",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": [
				{
					"Name": "record",
					"Typewords": [
						"nullable",
						"TLSRPTRecord"
					]
				},
				{
					"Name": "txt",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "errstr",
					"Typewords": [
						"string"
					]
				}
			]
		},
		{
			"Name": "TLSRPTRemoveResults",
			"Docs": "TLSRPTRemoveResults removes the TLS results for a domain for the given day. If\nday is empty, all results are removed.",
			"Params": [
				{
					"Name": "isRcptDom",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "domain",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "day",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "TLSRPTSuppressAdd",
			"Docs": "TLSRPTSuppressAdd adds a reporting address to the suppress list. Outgoing\nreports will be suppressed for a period.",
			"Params": [
				{
					"Name": "reportingAddress",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "until",
					"Typewords": [
						"timestamp"
					]
				},
				{
					"Name": "comment",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "TLSRPTSuppressList",
			"Docs": "TLSRPTSuppressList returns all reporting addresses on the suppress list.",
			"Params": [],
			"Returns": [
				{
					"Name": "r0",
					"Typewords": [
						"[]",
						"TLSRPTSuppressAddress"
					]
				}
			]
		},
		{
			"Name": "TLSRPTSuppressRemove",
			"Docs": "TLSRPTSuppressRemove removes a reporting address record from the suppress list.",
			"Params": [
				{
					"Name": "id",
					"Typewords": [
						"int64"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "TLSRPTSuppressExtend",
			"Docs": "TLSRPTSuppressExtend updates the until field of a suppressed reporting address record.",
			"Params": [
				{
					"Name": "id",
					"Typewords": [
						"int64"
					]
				},
				{
					"Name": "until",
					"Typewords": [
						"timestamp"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "LookupCid",
			"Docs": "LookupCid turns an ID from a Received header into a cid as used in logging.",
			"Params": [
				{
					"Name": "recvID",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": [
				{
					"Name": "cid",
					"Typewords": [
						"string"
					]
				}
			]
		},
		{
			"Name": "Config",
			"Docs": "Config returns the dynamic config.",
			"Params": [],
			"Returns": [
				{
					"Name": "r0",
					"Typewords": [
						"Dynamic"
					]
				}
			]
		},
		{
			"Name": "AccountRoutesSave",
			"Docs": "AccountRoutesSave saves routes for an account.",
			"Params": [
				{
					"Name": "accountName",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "routes",
					"Typewords": [
						"[]",
						"Route"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "DomainRoutesSave",
			"Docs": "DomainRoutesSave saves routes for a domain.",
			"Params": [
				{
					"Name": "domainName",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "routes",
					"Typewords": [
						"[]",
						"Route"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "RoutesSave",
			"Docs": "RoutesSave saves global routes.",
			"Params": [
				{
					"Name": "routes",
					"Typewords": [
						"[]",
						"Route"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "DomainDescriptionSave",
			"Docs": "DomainDescriptionSave saves the description for a domain.",
			"Params": [
				{
					"Name": "domainName",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "descr",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "DomainClientSettingsDomainSave",
			"Docs": "DomainClientSettingsDomainSave saves the client settings domain for a domain.",
			"Params": [
				{
					"Name": "domainName",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "clientSettingsDomain",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "DomainLocalpartConfigSave",
			"Docs": "DomainLocalpartConfigSave saves the localpart catchall and case-sensitive\nsettings for a domain.",
			"Params": [
				{
					"Name": "domainName",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "localpartCatchallSeparator",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "localpartCaseSensitive",
					"Typewords": [
						"bool"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "DomainDMARCAddressSave",
			"Docs": "DomainDMARCAddressSave saves the DMARC reporting address/processing\nconfiguration for a domain. If localpart is empty, processing reports is\ndisabled.",
			"Params": [
				{
					"Name": "domainName",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "localpart",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "domain",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "account",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "mailbox",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "DomainTLSRPTAddressSave",
			"Docs": "DomainTLSRPTAddressSave saves the TLS reporting address/processing\nconfiguration for a domain. If localpart is empty, processing reports is\ndisabled.",
			"Params": [
				{
					"Name": "domainName",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "localpart",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "domain",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "account",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "mailbox",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "DomainMTASTSSave",
			"Docs": "DomainMTASTSSave saves the MTASTS policy for a domain. If policyID is empty,\nno MTASTS policy is served.",
			"Params": [
				{
					"Name": "domainName",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "policyID",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "mode",
					"Typewords": [
						"Mode"
					]
				},
				{
					"Name": "maxAge",
					"Typewords": [
						"int64"
					]
				},
				{
					"Name": "mx",
					"Typewords": [
						"[]",
						"string"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "DomainDKIMAdd",
			"Docs": "DomainDKIMAdd adds a DKIM selector for a domain, generating a new private\nkey. The selector is not enabled for signing.",
			"Params": [
				{
					"Name": "domainName",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "selector",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "algorithm",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "hash",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "headerRelaxed",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "bodyRelaxed",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "seal",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "headers",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "lifetime",
					"Typewords": [
						"int64"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "DomainDKIMRemove",
			"Docs": "DomainDKIMRemove removes a DKIM selector for a domain.",
			"Params": [
				{
					"Name": "domainName",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "selector",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "DomainDKIMSave",
			"Docs": "DomainDKIMSave saves the settings of selectors, and which to enable for\nsigning, for a domain. All currently configured selectors must be present,\nselectors cannot be added/removed with this function.",
			"Params": [
				{
					"Name": "domainName",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "selectors",
					"Typewords": [
						"{}",
						"Selector"
					]
				},
				{
					"Name": "sign",
					"Typewords": [
						"[]",
						"string"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "AliasAdd",
			"Docs": "",
			"Params": [
				{
					"Name": "aliaslp",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "domainName",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "alias",
					"Typewords": [
						"Alias"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "AliasUpdate",
			"Docs": "",
			"Params": [
				{
					"Name": "aliaslp",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "domainName",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "postPublic",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "listMembers",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "allowMsgFrom",
					"Typewords": [
						"bool"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "AliasRemove",
			"Docs": "",
			"Params": [
				{
					"Name": "aliaslp",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "domainName",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "AliasAddressesAdd",
			"Docs": "",
			"Params": [
				{
					"Name": "aliaslp",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "domainName",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "addresses",
					"Typewords": [
						"[]",
						"string"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "AliasAddressesRemove",
			"Docs": "",
			"Params": [
				{
					"Name": "aliaslp",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "domainName",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "addresses",
					"Typewords": [
						"[]",
						"string"
					]
				}
			],
			"Returns": []
		},
		{
			"Name": "TLSPublicKeys",
			"Docs": "",
			"Params": [
				{
					"Name": "accountOpt",
					"Typewords": [
						"string"
					]
				}
			],
			"Returns": [
				{
					"Name": "r0",
					"Typewords": [
						"[]",
						"TLSPublicKey"
					]
				}
			]
		}
	],
	"Sections": [],
	"Structs": [
		{
			"Name": "CheckResult",
			"Docs": "CheckResult is the analysis of a domain, its actual configuration (DNS, TLS,\nconnectivity) and the mox configuration. It includes configuration instructions\n(e.g. DNS records), and warnings and errors encountered.",
			"Fields": [
				{
					"Name": "Domain",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "DNSSEC",
					"Docs": "",
					"Typewords": [
						"DNSSECResult"
					]
				},
				{
					"Name": "IPRev",
					"Docs": "",
					"Typewords": [
						"IPRevCheckResult"
					]
				},
				{
					"Name": "MX",
					"Docs": "",
					"Typewords": [
						"MXCheckResult"
					]
				},
				{
					"Name": "TLS",
					"Docs": "",
					"Typewords": [
						"TLSCheckResult"
					]
				},
				{
					"Name": "DANE",
					"Docs": "",
					"Typewords": [
						"DANECheckResult"
					]
				},
				{
					"Name": "SPF",
					"Docs": "",
					"Typewords": [
						"SPFCheckResult"
					]
				},
				{
					"Name": "DKIM",
					"Docs": "",
					"Typewords": [
						"DKIMCheckResult"
					]
				},
				{
					"Name": "DMARC",
					"Docs": "",
					"Typewords": [
						"DMARCCheckResult"
					]
				},
				{
					"Name": "HostTLSRPT",
					"Docs": "",
					"Typewords": [
						"TLSRPTCheckResult"
					]
				},
				{
					"Name": "DomainTLSRPT",
					"Docs": "",
					"Typewords": [
						"TLSRPTCheckResult"
					]
				},
				{
					"Name": "MTASTS",
					"Docs": "",
					"Typewords": [
						"MTASTSCheckResult"
					]
				},
				{
					"Name": "SRVConf",
					"Docs": "",
					"Typewords": [
						"SRVConfCheckResult"
					]
				},
				{
					"Name": "Autoconf",
					"Docs": "",
					"Typewords": [
						"AutoconfCheckResult"
					]
				},
				{
					"Name": "Autodiscover",
					"Docs": "",
					"Typewords": [
						"AutodiscoverCheckResult"
					]
				}
			]
		},
		{
			"Name": "DNSSECResult",
			"Docs": "",
			"Fields": [
				{
					"Name": "Errors",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "Warnings",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "Instructions",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				}
			]
		},
		{
			"Name": "IPRevCheckResult",
			"Docs": "",
			"Fields": [
				{
					"Name": "Hostname",
					"Docs": "This hostname, IPs must resolve back to this.",
					"Typewords": [
						"Domain"
					]
				},
				{
					"Name": "IPNames",
					"Docs": "IP to names.",
					"Typewords": [
						"{}",
						"[]",
						"string"
					]
				},
				{
					"Name": "Errors",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "Warnings",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "Instructions",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				}
			]
		},
		{
			"Name": "Domain",
			"Docs": "Domain is a domain name, with one or more labels, with at least an ASCII\nrepresentation, and for IDNA non-ASCII domains a unicode representation.\nThe ASCII string must be used for DNS lookups. The strings do not have a\ntrailing dot. When using with StrictResolver, add the trailing dot.",
			"Fields": [
				{
					"Name": "ASCII",
					"Docs": "A non-unicode domain, e.g. with A-labels (xn--...) or NR-LDH (non-reserved letters/digits/hyphens) labels. Always in lower case. No trailing dot.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Unicode",
					"Docs": "Name as U-labels, in Unicode NFC. Empty if this is an ASCII-only domain. No trailing dot.",
					"Typewords": [
						"string"
					]
				}
			]
		},
		{
			"Name": "MXCheckResult",
			"Docs": "",
			"Fields": [
				{
					"Name": "Records",
					"Docs": "",
					"Typewords": [
						"[]",
						"MX"
					]
				},
				{
					"Name": "Errors",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "Warnings",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "Instructions",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				}
			]
		},
		{
			"Name": "MX",
			"Docs": "",
			"Fields": [
				{
					"Name": "Host",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Pref",
					"Docs": "",
					"Typewords": [
						"int32"
					]
				},
				{
					"Name": "IPs",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				}
			]
		},
		{
			"Name": "TLSCheckResult",
			"Docs": "",
			"Fields": [
				{
					"Name": "Errors",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "Warnings",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "Instructions",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				}
			]
		},
		{
			"Name": "DANECheckResult",
			"Docs": "",
			"Fields": [
				{
					"Name": "Errors",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "Warnings",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "Instructions",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				}
			]
		},
		{
			"Name": "SPFCheckResult",
			"Docs": "",
			"Fields": [
				{
					"Name": "DomainTXT",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "DomainRecord",
					"Docs": "",
					"Typewords": [
						"nullable",
						"SPFRecord"
					]
				},
				{
					"Name": "HostTXT",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "HostRecord",
					"Docs": "",
					"Typewords": [
						"nullable",
						"SPFRecord"
					]
				},
				{
					"Name": "Errors",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "Warnings",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "Instructions",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				}
			]
		},
		{
			"Name": "SPFRecord",
			"Docs": "",
			"Fields": [
				{
					"Name": "Version",
					"Docs": "Must be \"spf1\".",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Directives",
					"Docs": "An IP is evaluated against each directive until a match is found.",
					"Typewords": [
						"[]",
						"Directive"
					]
				},
				{
					"Name": "Redirect",
					"Docs": "Modifier that redirects SPF checks to other domain after directives did not match. Optional. For \"redirect=\".",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Explanation",
					"Docs": "Modifier for creating a user-friendly error message when an IP results in status \"fail\".",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Other",
					"Docs": "Other modifiers.",
					"Typewords": [
						"[]",
						"Modifier"
					]
				}
			]
		},
		{
			"Name": "Directive",
			"Docs": "Directive consists of a mechanism that describes how to check if an IP matches,\nan (optional) qualifier indicating the policy for a match, and optional\nparameters specific to the mechanism.",
			"Fields": [
				{
					"Name": "Qualifier",
					"Docs": "Sets the result if this directive matches. \"\" and \"+\" are \"pass\", \"-\" is \"fail\", \"?\" is \"neutral\", \"~\" is \"softfail\".",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Mechanism",
					"Docs": "\"all\", \"include\", \"a\", \"mx\", \"ptr\", \"ip4\", \"ip6\", \"exists\".",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "DomainSpec",
					"Docs": "For include, a, mx, ptr, exists. Always in lower-case when parsed using ParseRecord.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "IPstr",
					"Docs": "Original string for IP, always with /subnet.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "IP4CIDRLen",
					"Docs": "For a, mx, ip4.",
					"Typewords": [
						"nullable",
						"int32"
					]
				},
				{
					"Name": "IP6CIDRLen",
					"Docs": "For a, mx, ip6.",
					"Typewords": [
						"nullable",
						"int32"
					]
				}
			]
		},
		{
			"Name": "Modifier",
			"Docs": "Modifier provides additional information for a policy.\n\"redirect\" and \"exp\" are not represented as a Modifier but explicitly in a Record.",
			"Fields": [
				{
					"Name": "Key",
					"Docs": "Key is case-insensitive.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Value",
					"Docs": "",
					"Typewords": [
						"string"
					]
				}
			]
		},
		{
			"Name": "DKIMCheckResult",
			"Docs": "",
			"Fields": [
				{
					"Name": "Records",
					"Docs": "",
					"Typewords": [
						"[]",
						"DKIMRecord"
					]
				},
				{
					"Name": "Errors",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "Warnings",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "Instructions",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				}
			]
		},
		{
			"Name": "DKIMRecord",
			"Docs": "",
			"Fields": [
				{
					"Name": "Selector",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "TXT",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Record",
					"Docs": "",
					"Typewords": [
						"nullable",
						"Record"
					]
				}
			]
		},
		{
			"Name": "Record",
			"Docs": "Record is a DKIM DNS record, served on \u003cselector\u003e._domainkey.\u003cdomain\u003e for a\ngiven selector and domain (s= and d= in the DKIM-Signature).\n\nThe record is a semicolon-separated list of \"=\"-separated field value pairs.\nStrings should be compared case-insensitively, e.g. k=ed25519 is equivalent to k=ED25519.\n\nExample:\n\n\tv=DKIM1;h=sha256;k=ed25519;p=ln5zd/JEX4Jy60WAhUOv33IYm2YZMyTQAdr9stML504=",
			"Fields": [
				{
					"Name": "Version",
					"Docs": "Version, fixed \"DKIM1\" (case sensitive). Field \"v\".",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Hashes",
					"Docs": "Acceptable hash algorithms, e.g. \"sha1\", \"sha256\". Optional, defaults to all algorithms. Field \"h\".",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "Key",
					"Docs": "Key type, \"rsa\" or \"ed25519\". Optional, default \"rsa\". Field \"k\".",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Notes",
					"Docs": "Debug notes. Field \"n\".",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Pubkey",
					"Docs": "Public key, as base64 in record. If empty, the key has been revoked. Field \"p\".",
					"Typewords": [
						"[]",
						"uint8"
					]
				},
				{
					"Name": "Services",
					"Docs": "Service types. Optional, default \"*\" for all services. Other values: \"email\". Field \"s\".",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "Flags",
					"Docs": "Flags, colon-separated. Optional, default is no flags. Other values: \"y\" for testing DKIM, \"s\" for \"i=\" must have same domain as \"d\" in signatures. Field \"t\".",
					"Typewords": [
						"[]",
						"string"
					]
				}
			]
		},
		{
			"Name": "DMARCCheckResult",
			"Docs": "",
			"Fields": [
				{
					"Name": "Domain",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "TXT",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Record",
					"Docs": "",
					"Typewords": [
						"nullable",
						"DMARCRecord"
					]
				},
				{
					"Name": "Errors",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "Warnings",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "Instructions",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				}
			]
		},
		{
			"Name": "DMARCRecord",
			"Docs": "",
			"Fields": [
				{
					"Name": "Version",
					"Docs": "\"v=DMARC1\", fixed.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Policy",
					"Docs": "Required, for \"p=\".",
					"Typewords": [
						"DMARCPolicy"
					]
				},
				{
					"Name": "SubdomainPolicy",
					"Docs": "Like policy but for subdomains. Optional, for \"sp=\".",
					"Typewords": [
						"DMARCPolicy"
					]
				},
				{
					"Name": "AggregateReportAddresses",
					"Docs": "Optional, for \"rua=\". Destination addresses for aggregate reports.",
					"Typewords": [
						"[]",
						"URI"
					]
				},
				{
					"Name": "FailureReportAddresses",
					"Docs": "Optional, for \"ruf=\". Destination addresses for failure reports.",
					"Typewords": [
						"[]",
						"URI"
					]
				},
				{
					"Name": "ADKIM",
					"Docs": "Alignment: \"r\" (default) for relaxed or \"s\" for simple. For \"adkim=\".",
					"Typewords": [
						"Align"
					]
				},
				{
					"Name": "ASPF",
					"Docs": "Alignment: \"r\" (default) for relaxed or \"s\" for simple. For \"aspf=\".",
					"Typewords": [
						"Align"
					]
				},
				{
					"Name": "AggregateReportingInterval",
					"Docs": "In seconds, default 86400. For \"ri=\"",
					"Typewords": [
						"int32"
					]
				},
				{
					"Name": "FailureReportingOptions",
					"Docs": "\"0\" (default), \"1\", \"d\", \"s\". For \"fo=\".",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "ReportingFormat",
					"Docs": "\"afrf\" (default). For \"rf=\".",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "Percentage",
					"Docs": "Between 0 and 100, default 100. For \"pct=\". Policy applies randomly to this percentage of messages.",
					"Typewords": [
						"int32"
					]
				}
			]
		},
		{
			"Name": "URI",
			"Docs": "URI is a destination address for reporting.",
			"Fields": [
				{
					"Name": "Address",
					"Docs": "Should start with \"mailto:\".",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "MaxSize",
					"Docs": "Optional maximum message size, subject to Unit.",
					"Typewords": [
						"uint64"
					]
				},
				{
					"Name": "Unit",
					"Docs": "\"\" (b), \"k\", \"m\", \"g\", \"t\" (case insensitive), unit size, where k is 2^10 etc.",
					"Typewords": [
						"string"
					]
				}
			]
		},
		{
			"Name": "TLSRPTCheckResult",
			"Docs": "",
			"Fields": [
				{
					"Name": "TXT",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Record",
					"Docs": "",
					"Typewords": [
						"nullable",
						"TLSRPTRecord"
					]
				},
				{
					"Name": "Errors",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "Warnings",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "Instructions",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				}
			]
		},
		{
			"Name": "TLSRPTRecord",
			"Docs": "",
			"Fields": [
				{
					"Name": "Version",
					"Docs": "\"TLSRPTv1\", for \"v=\".",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "RUAs",
					"Docs": "Aggregate reporting URI, for \"rua=\". \"rua=\" can occur multiple times, each can be a list.",
					"Typewords": [
						"[]",
						"[]",
						"RUA"
					]
				},
				{
					"Name": "Extensions",
					"Docs": "",
					"Typewords": [
						"[]",
						"Extension"
					]
				}
			]
		},
		{
			"Name": "Extension",
			"Docs": "Extension is an additional key/value pair for a TLSRPT record.",
			"Fields": [
				{
					"Name": "Key",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Value",
					"Docs": "",
					"Typewords": [
						"string"
					]
				}
			]
		},
		{
			"Name": "MTASTSCheckResult",
			"Docs": "",
			"Fields": [
				{
					"Name": "TXT",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Record",
					"Docs": "",
					"Typewords": [
						"nullable",
						"MTASTSRecord"
					]
				},
				{
					"Name": "PolicyText",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Policy",
					"Docs": "",
					"Typewords": [
						"nullable",
						"Policy"
					]
				},
				{
					"Name": "Errors",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "Warnings",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "Instructions",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				}
			]
		},
		{
			"Name": "MTASTSRecord",
			"Docs": "",
			"Fields": [
				{
					"Name": "Version",
					"Docs": "\"STSv1\", for \"v=\". Required.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "ID",
					"Docs": "Record version, for \"id=\". Required.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Extensions",
					"Docs": "Optional extensions.",
					"Typewords": [
						"[]",
						"Pair"
					]
				}
			]
		},
		{
			"Name": "Pair",
			"Docs": "Pair is an extension key/value pair in a MTA-STS DNS record or policy.",
			"Fields": [
				{
					"Name": "Key",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Value",
					"Docs": "",
					"Typewords": [
						"string"
					]
				}
			]
		},
		{
			"Name": "Policy",
			"Docs": "Policy is an MTA-STS policy as served at \"https://mta-sts.\u003cdomain\u003e/.well-known/mta-sts.txt\".",
			"Fields": [
				{
					"Name": "Version",
					"Docs": "\"STSv1\"",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Mode",
					"Docs": "",
					"Typewords": [
						"Mode"
					]
				},
				{
					"Name": "MX",
					"Docs": "",
					"Typewords": [
						"[]",
						"STSMX"
					]
				},
				{
					"Name": "MaxAgeSeconds",
					"Docs": "How long this policy can be cached. Suggested values are in weeks or more.",
					"Typewords": [
						"int32"
					]
				},
				{
					"Name": "Extensions",
					"Docs": "",
					"Typewords": [
						"[]",
						"Pair"
					]
				}
			]
		},
		{
			"Name": "STSMX",
			"Docs": "MX is an allowlisted MX host name/pattern.",
			"Fields": [
				{
					"Name": "Wildcard",
					"Docs": "\"*.\" wildcard, e.g. if a subdomain matches. A wildcard must match exactly one label. *.example.com matches mail.example.com, but not example.com, and not foor.bar.example.com.",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "Domain",
					"Docs": "",
					"Typewords": [
						"Domain"
					]
				}
			]
		},
		{
			"Name": "SRVConfCheckResult",
			"Docs": "",
			"Fields": [
				{
					"Name": "SRVs",
					"Docs": "Service (e.g. \"_imaps\") to records.",
					"Typewords": [
						"{}",
						"[]",
						"SRV"
					]
				},
				{
					"Name": "Errors",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "Warnings",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "Instructions",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				}
			]
		},
		{
			"Name": "SRV",
			"Docs": "An SRV represents a single DNS SRV record.",
			"Fields": [
				{
					"Name": "Target",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Port",
					"Docs": "",
					"Typewords": [
						"uint16"
					]
				},
				{
					"Name": "Priority",
					"Docs": "",
					"Typewords": [
						"uint16"
					]
				},
				{
					"Name": "Weight",
					"Docs": "",
					"Typewords": [
						"uint16"
					]
				}
			]
		},
		{
			"Name": "AutoconfCheckResult",
			"Docs": "",
			"Fields": [
				{
					"Name": "ClientSettingsDomainIPs",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "IPs",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "Errors",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "Warnings",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "Instructions",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				}
			]
		},
		{
			"Name": "AutodiscoverCheckResult",
			"Docs": "",
			"Fields": [
				{
					"Name": "Records",
					"Docs": "",
					"Typewords": [
						"[]",
						"AutodiscoverSRV"
					]
				},
				{
					"Name": "Errors",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "Warnings",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "Instructions",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				}
			]
		},
		{
			"Name": "AutodiscoverSRV",
			"Docs": "",
			"Fields": [
				{
					"Name": "Target",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Port",
					"Docs": "",
					"Typewords": [
						"uint16"
					]
				},
				{
					"Name": "Priority",
					"Docs": "",
					"Typewords": [
						"uint16"
					]
				},
				{
					"Name": "Weight",
					"Docs": "",
					"Typewords": [
						"uint16"
					]
				},
				{
					"Name": "IPs",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				}
			]
		},
		{
			"Name": "ConfigDomain",
			"Docs": "",
			"Fields": [
				{
					"Name": "Description",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "ClientSettingsDomain",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "LocalpartCatchallSeparator",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "LocalpartCaseSensitive",
					"Docs": "",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "DKIM",
					"Docs": "",
					"Typewords": [
						"DKIM"
					]
				},
				{
					"Name": "DMARC",
					"Docs": "",
					"Typewords": [
						"nullable",
						"DMARC"
					]
				},
				{
					"Name": "MTASTS",
					"Docs": "",
					"Typewords": [
						"nullable",
						"MTASTS"
					]
				},
				{
					"Name": "TLSRPT",
					"Docs": "",
					"Typewords": [
						"nullable",
						"TLSRPT"
					]
				},
				{
					"Name": "Routes",
					"Docs": "",
					"Typewords": [
						"[]",
						"Route"
					]
				},
				{
					"Name": "Aliases",
					"Docs": "",
					"Typewords": [
						"{}",
						"Alias"
					]
				},
				{
					"Name": "Domain",
					"Docs": "",
					"Typewords": [
						"Domain"
					]
				}
			]
		},
		{
			"Name": "DKIM",
			"Docs": "",
			"Fields": [
				{
					"Name": "Selectors",
					"Docs": "",
					"Typewords": [
						"{}",
						"Selector"
					]
				},
				{
					"Name": "Sign",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				}
			]
		},
		{
			"Name": "Selector",
			"Docs": "",
			"Fields": [
				{
					"Name": "Hash",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "HashEffective",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Canonicalization",
					"Docs": "",
					"Typewords": [
						"Canonicalization"
					]
				},
				{
					"Name": "Headers",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "HeadersEffective",
					"Docs": "Used when signing. Based on Headers from config, or the reasonable default.",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "DontSealHeaders",
					"Docs": "",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "Expiration",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "PrivateKeyFile",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Algorithm",
					"Docs": "\"ed25519\", \"rsa-*\", based on private key.",
					"Typewords": [
						"string"
					]
				}
			]
		},
		{
			"Name": "Canonicalization",
			"Docs": "",
			"Fields": [
				{
					"Name": "HeaderRelaxed",
					"Docs": "",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "BodyRelaxed",
					"Docs": "",
					"Typewords": [
						"bool"
					]
				}
			]
		},
		{
			"Name": "DMARC",
			"Docs": "",
			"Fields": [
				{
					"Name": "Localpart",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Domain",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Account",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Mailbox",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "ParsedLocalpart",
					"Docs": "",
					"Typewords": [
						"Localpart"
					]
				},
				{
					"Name": "DNSDomain",
					"Docs": "Effective domain, always set based on Domain field or Domain where this is configured.",
					"Typewords": [
						"Domain"
					]
				}
			]
		},
		{
			"Name": "MTASTS",
			"Docs": "",
			"Fields": [
				{
					"Name": "PolicyID",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Mode",
					"Docs": "",
					"Typewords": [
						"Mode"
					]
				},
				{
					"Name": "MaxAge",
					"Docs": "",
					"Typewords": [
						"int64"
					]
				},
				{
					"Name": "MX",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				}
			]
		},
		{
			"Name": "TLSRPT",
			"Docs": "",
			"Fields": [
				{
					"Name": "Localpart",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Domain",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Account",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Mailbox",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "ParsedLocalpart",
					"Docs": "",
					"Typewords": [
						"Localpart"
					]
				},
				{
					"Name": "DNSDomain",
					"Docs": "Effective domain, always set based on Domain field or Domain where this is configured.",
					"Typewords": [
						"Domain"
					]
				}
			]
		},
		{
			"Name": "Route",
			"Docs": "",
			"Fields": [
				{
					"Name": "FromDomain",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "ToDomain",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "MinimumAttempts",
					"Docs": "",
					"Typewords": [
						"int32"
					]
				},
				{
					"Name": "Transport",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "FromDomainASCII",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "ToDomainASCII",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				}
			]
		},
		{
			"Name": "Alias",
			"Docs": "",
			"Fields": [
				{
					"Name": "Addresses",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "PostPublic",
					"Docs": "",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "ListMembers",
					"Docs": "",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "AllowMsgFrom",
					"Docs": "",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "LocalpartStr",
					"Docs": "In encoded form.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Domain",
					"Docs": "",
					"Typewords": [
						"Domain"
					]
				},
				{
					"Name": "ParsedAddresses",
					"Docs": "Matches addresses.",
					"Typewords": [
						"[]",
						"AliasAddress"
					]
				}
			]
		},
		{
			"Name": "AliasAddress",
			"Docs": "",
			"Fields": [
				{
					"Name": "Address",
					"Docs": "Parsed address.",
					"Typewords": [
						"Address"
					]
				},
				{
					"Name": "AccountName",
					"Docs": "Looked up.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Destination",
					"Docs": "Belonging to address.",
					"Typewords": [
						"Destination"
					]
				}
			]
		},
		{
			"Name": "Address",
			"Docs": "Address is a parsed email address.",
			"Fields": [
				{
					"Name": "Localpart",
					"Docs": "",
					"Typewords": [
						"Localpart"
					]
				},
				{
					"Name": "Domain",
					"Docs": "todo: shouldn't we accept an ip address here too? and merge this type into smtp.Path.",
					"Typewords": [
						"Domain"
					]
				}
			]
		},
		{
			"Name": "Destination",
			"Docs": "",
			"Fields": [
				{
					"Name": "Mailbox",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Rulesets",
					"Docs": "",
					"Typewords": [
						"[]",
						"Ruleset"
					]
				},
				{
					"Name": "FullName",
					"Docs": "",
					"Typewords": [
						"string"
					]
				}
			]
		},
		{
			"Name": "Ruleset",
			"Docs": "",
			"Fields": [
				{
					"Name": "SMTPMailFromRegexp",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "MsgFromRegexp",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "VerifiedDomain",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "HeadersRegexp",
					"Docs": "",
					"Typewords": [
						"{}",
						"string"
					]
				},
				{
					"Name": "IsForward",
					"Docs": "todo: once we implement ARC, we can use dkim domains that we cannot verify but that the arc-verified forwarding mail server was able to verify.",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "ListAllowDomain",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "AcceptRejectsToMailbox",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Mailbox",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Comment",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "VerifiedDNSDomain",
					"Docs": "",
					"Typewords": [
						"Domain"
					]
				},
				{
					"Name": "ListAllowDNSDomain",
					"Docs": "",
					"Typewords": [
						"Domain"
					]
				}
			]
		},
		{
			"Name": "Account",
			"Docs": "",
			"Fields": [
				{
					"Name": "OutgoingWebhook",
					"Docs": "",
					"Typewords": [
						"nullable",
						"OutgoingWebhook"
					]
				},
				{
					"Name": "IncomingWebhook",
					"Docs": "",
					"Typewords": [
						"nullable",
						"IncomingWebhook"
					]
				},
				{
					"Name": "FromIDLoginAddresses",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "KeepRetiredMessagePeriod",
					"Docs": "",
					"Typewords": [
						"int64"
					]
				},
				{
					"Name": "KeepRetiredWebhookPeriod",
					"Docs": "",
					"Typewords": [
						"int64"
					]
				},
				{
					"Name": "Domain",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Description",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "FullName",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Destinations",
					"Docs": "",
					"Typewords": [
						"{}",
						"Destination"
					]
				},
				{
					"Name": "SubjectPass",
					"Docs": "",
					"Typewords": [
						"SubjectPass"
					]
				},
				{
					"Name": "QuotaMessageSize",
					"Docs": "",
					"Typewords": [
						"int64"
					]
				},
				{
					"Name": "RejectsMailbox",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "KeepRejects",
					"Docs": "",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "AutomaticJunkFlags",
					"Docs": "",
					"Typewords": [
						"AutomaticJunkFlags"
					]
				},
				{
					"Name": "JunkFilter",
					"Docs": "todo: sane defaults for junkfilter",
					"Typewords": [
						"nullable",
						"JunkFilter"
					]
				},
				{
					"Name": "MaxOutgoingMessagesPerDay",
					"Docs": "",
					"Typewords": [
						"int32"
					]
				},
				{
					"Name": "MaxFirstTimeRecipientsPerDay",
					"Docs": "",
					"Typewords": [
						"int32"
					]
				},
				{
					"Name": "NoFirstTimeSenderDelay",
					"Docs": "",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "Routes",
					"Docs": "",
					"Typewords": [
						"[]",
						"Route"
					]
				},
				{
					"Name": "DNSDomain",
					"Docs": "Parsed form of Domain.",
					"Typewords": [
						"Domain"
					]
				},
				{
					"Name": "Aliases",
					"Docs": "",
					"Typewords": [
						"[]",
						"AddressAlias"
					]
				}
			]
		},
		{
			"Name": "OutgoingWebhook",
			"Docs": "",
			"Fields": [
				{
					"Name": "URL",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Authorization",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Events",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				}
			]
		},
		{
			"Name": "IncomingWebhook",
			"Docs": "",
			"Fields": [
				{
					"Name": "URL",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Authorization",
					"Docs": "",
					"Typewords": [
						"string"
					]
				}
			]
		},
		{
			"Name": "SubjectPass",
			"Docs": "",
			"Fields": [
				{
					"Name": "Period",
					"Docs": "todo: have a reasonable default for this?",
					"Typewords": [
						"int64"
					]
				}
			]
		},
		{
			"Name": "AutomaticJunkFlags",
			"Docs": "",
			"Fields": [
				{
					"Name": "Enabled",
					"Docs": "",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "JunkMailboxRegexp",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "NeutralMailboxRegexp",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "NotJunkMailboxRegexp",
					"Docs": "",
					"Typewords": [
						"string"
					]
				}
			]
		},
		{
			"Name": "JunkFilter",
			"Docs": "",
			"Fields": [
				{
					"Name": "Threshold",
					"Docs": "",
					"Typewords": [
						"float64"
					]
				},
				{
					"Name": "Onegrams",
					"Docs": "",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "Twograms",
					"Docs": "",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "Threegrams",
					"Docs": "",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "MaxPower",
					"Docs": "",
					"Typewords": [
						"float64"
					]
				},
				{
					"Name": "TopWords",
					"Docs": "",
					"Typewords": [
						"int32"
					]
				},
				{
					"Name": "IgnoreWords",
					"Docs": "",
					"Typewords": [
						"float64"
					]
				},
				{
					"Name": "RareWords",
					"Docs": "",
					"Typewords": [
						"int32"
					]
				}
			]
		},
		{
			"Name": "AddressAlias",
			"Docs": "",
			"Fields": [
				{
					"Name": "SubscriptionAddress",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Alias",
					"Docs": "Without members.",
					"Typewords": [
						"Alias"
					]
				},
				{
					"Name": "MemberAddresses",
					"Docs": "Only if allowed to see.",
					"Typewords": [
						"[]",
						"string"
					]
				}
			]
		},
		{
			"Name": "PolicyRecord",
			"Docs": "PolicyRecord is a cached policy or absence of a policy.",
			"Fields": [
				{
					"Name": "Domain",
					"Docs": "Domain name, with unicode characters.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Inserted",
					"Docs": "",
					"Typewords": [
						"timestamp"
					]
				},
				{
					"Name": "ValidEnd",
					"Docs": "",
					"Typewords": [
						"timestamp"
					]
				},
				{
					"Name": "LastUpdate",
					"Docs": "Policies are refreshed on use and periodically.",
					"Typewords": [
						"timestamp"
					]
				},
				{
					"Name": "LastUse",
					"Docs": "",
					"Typewords": [
						"timestamp"
					]
				},
				{
					"Name": "Backoff",
					"Docs": "",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "RecordID",
					"Docs": "As retrieved from DNS.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Version",
					"Docs": "\"STSv1\"",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Mode",
					"Docs": "",
					"Typewords": [
						"Mode"
					]
				},
				{
					"Name": "MX",
					"Docs": "",
					"Typewords": [
						"[]",
						"STSMX"
					]
				},
				{
					"Name": "MaxAgeSeconds",
					"Docs": "How long this policy can be cached. Suggested values are in weeks or more.",
					"Typewords": [
						"int32"
					]
				},
				{
					"Name": "Extensions",
					"Docs": "",
					"Typewords": [
						"[]",
						"Pair"
					]
				},
				{
					"Name": "PolicyText",
					"Docs": "Text that make up the policy, as retrieved. We didn't store this in the past. If empty, policy can be reconstructed from Policy field. Needed by TLSRPT.",
					"Typewords": [
						"string"
					]
				}
			]
		},
		{
			"Name": "TLSReportRecord",
			"Docs": "Record is a TLS report as a database record, including information\nabout the sender.",
			"Fields": [
				{
					"Name": "ID",
					"Docs": "",
					"Typewords": [
						"int64"
					]
				},
				{
					"Name": "Domain",
					"Docs": "Policy domain to which the TLS report applies. Unicode.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "FromDomain",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "MailFrom",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "HostReport",
					"Docs": "Report for host TLSRPT record, as opposed to domain TLSRPT record.",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "Report",
					"Docs": "",
					"Typewords": [
						"Report"
					]
				}
			]
		},
		{
			"Name": "Report",
			"Docs": "Report is a TLSRPT report.",
			"Fields": [
				{
					"Name": "OrganizationName",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "DateRange",
					"Docs": "",
					"Typewords": [
						"TLSRPTDateRange"
					]
				},
				{
					"Name": "ContactInfo",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "ReportID",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Policies",
					"Docs": "",
					"Typewords": [
						"[]",
						"Result"
					]
				}
			]
		},
		{
			"Name": "TLSRPTDateRange",
			"Docs": "note: with TLSRPT prefix to prevent clash in sherpadoc types.",
			"Fields": [
				{
					"Name": "Start",
					"Docs": "",
					"Typewords": [
						"timestamp"
					]
				},
				{
					"Name": "End",
					"Docs": "",
					"Typewords": [
						"timestamp"
					]
				}
			]
		},
		{
			"Name": "Result",
			"Docs": "",
			"Fields": [
				{
					"Name": "Policy",
					"Docs": "",
					"Typewords": [
						"ResultPolicy"
					]
				},
				{
					"Name": "Summary",
					"Docs": "",
					"Typewords": [
						"Summary"
					]
				},
				{
					"Name": "FailureDetails",
					"Docs": "",
					"Typewords": [
						"[]",
						"FailureDetails"
					]
				}
			]
		},
		{
			"Name": "ResultPolicy",
			"Docs": "",
			"Fields": [
				{
					"Name": "Type",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "String",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "Domain",
					"Docs": "ASCII/A-labels, ../rfc/8460:704",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "MXHost",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				}
			]
		},
		{
			"Name": "Summary",
			"Docs": "",
			"Fields": [
				{
					"Name": "TotalSuccessfulSessionCount",
					"Docs": "",
					"Typewords": [
						"int64"
					]
				},
				{
					"Name": "TotalFailureSessionCount",
					"Docs": "",
					"Typewords": [
						"int64"
					]
				}
			]
		},
		{
			"Name": "FailureDetails",
			"Docs": "",
			"Fields": [
				{
					"Name": "ResultType",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "SendingMTAIP",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "ReceivingMXHostname",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "ReceivingMXHelo",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "ReceivingIP",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "FailedSessionCount",
					"Docs": "",
					"Typewords": [
						"int64"
					]
				},
				{
					"Name": "AdditionalInformation",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "FailureReasonCode",
					"Docs": "",
					"Typewords": [
						"string"
					]
				}
			]
		},
		{
			"Name": "TLSRPTSummary",
			"Docs": "TLSRPTSummary presents TLS reporting statistics for a single domain\nover a period.",
			"Fields": [
				{
					"Name": "PolicyDomain",
					"Docs": "",
					"Typewords": [
						"Domain"
					]
				},
				{
					"Name": "Success",
					"Docs": "",
					"Typewords": [
						"int64"
					]
				},
				{
					"Name": "Failure",
					"Docs": "",
					"Typewords": [
						"int64"
					]
				},
				{
					"Name": "ResultTypeCounts",
					"Docs": "",
					"Typewords": [
						"{}",
						"int64"
					]
				}
			]
		},
		{
			"Name": "DomainFeedback",
			"Docs": "DomainFeedback is a single report stored in the database.",
			"Fields": [
				{
					"Name": "ID",
					"Docs": "",
					"Typewords": [
						"int64"
					]
				},
				{
					"Name": "Domain",
					"Docs": "Domain where DMARC DNS record was found, could be organizational domain.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "FromDomain",
					"Docs": "Domain in From-header.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Version",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "ReportMetadata",
					"Docs": "",
					"Typewords": [
						"ReportMetadata"
					]
				},
				{
					"Name": "PolicyPublished",
					"Docs": "",
					"Typewords": [
						"PolicyPublished"
					]
				},
				{
					"Name": "Records",
					"Docs": "",
					"Typewords": [
						"[]",
						"ReportRecord"
					]
				}
			]
		},
		{
			"Name": "ReportMetadata",
			"Docs": "",
			"Fields": [
				{
					"Name": "OrgName",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Email",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "ExtraContactInfo",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "ReportID",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "DateRange",
					"Docs": "",
					"Typewords": [
						"DateRange"
					]
				},
				{
					"Name": "Errors",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				}
			]
		},
		{
			"Name": "DateRange",
			"Docs": "",
			"Fields": [
				{
					"Name": "Begin",
					"Docs": "",
					"Typewords": [
						"int64"
					]
				},
				{
					"Name": "End",
					"Docs": "",
					"Typewords": [
						"int64"
					]
				}
			]
		},
		{
			"Name": "PolicyPublished",
			"Docs": "PolicyPublished is the policy as found in DNS for the domain.",
			"Fields": [
				{
					"Name": "Domain",
					"Docs": "Domain is where DMARC record was found, not necessarily message From. Reports we generate use unicode names, incoming reports may have either ASCII-only or Unicode domains.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "ADKIM",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "ASPF",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Policy",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "SubdomainPolicy",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Percentage",
					"Docs": "",
					"Typewords": [
						"int32"
					]
				},
				{
					"Name": "ReportingOptions",
					"Docs": "",
					"Typewords": [
						"string"
					]
				}
			]
		},
		{
			"Name": "ReportRecord",
			"Docs": "",
			"Fields": [
				{
					"Name": "Row",
					"Docs": "",
					"Typewords": [
						"Row"
					]
				},
				{
					"Name": "Identifiers",
					"Docs": "",
					"Typewords": [
						"Identifiers"
					]
				},
				{
					"Name": "AuthResults",
					"Docs": "",
					"Typewords": [
						"AuthResults"
					]
				}
			]
		},
		{
			"Name": "Row",
			"Docs": "",
			"Fields": [
				{
					"Name": "SourceIP",
					"Docs": "SourceIP must match the pattern ((1?[0-9]?[0-9]|2[0-4][0-9]|25[0-5]).){3} (1?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])| ([A-Fa-f0-9]{1,4}:){7}[A-Fa-f0-9]{1,4}",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Count",
					"Docs": "",
					"Typewords": [
						"int32"
					]
				},
				{
					"Name": "PolicyEvaluated",
					"Docs": "",
					"Typewords": [
						"PolicyEvaluated"
					]
				}
			]
		},
		{
			"Name": "PolicyEvaluated",
			"Docs": "",
			"Fields": [
				{
					"Name": "Disposition",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "DKIM",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "SPF",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Reasons",
					"Docs": "",
					"Typewords": [
						"[]",
						"PolicyOverrideReason"
					]
				}
			]
		},
		{
			"Name": "PolicyOverrideReason",
			"Docs": "",
			"Fields": [
				{
					"Name": "Type",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Comment",
					"Docs": "",
					"Typewords": [
						"string"
					]
				}
			]
		},
		{
			"Name": "Identifiers",
			"Docs": "",
			"Fields": [
				{
					"Name": "EnvelopeTo",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "EnvelopeFrom",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "HeaderFrom",
					"Docs": "",
					"Typewords": [
						"string"
					]
				}
			]
		},
		{
			"Name": "AuthResults",
			"Docs": "",
			"Fields": [
				{
					"Name": "DKIM",
					"Docs": "",
					"Typewords": [
						"[]",
						"DKIMAuthResult"
					]
				},
				{
					"Name": "SPF",
					"Docs": "",
					"Typewords": [
						"[]",
						"SPFAuthResult"
					]
				}
			]
		},
		{
			"Name": "DKIMAuthResult",
			"Docs": "",
			"Fields": [
				{
					"Name": "Domain",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Selector",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Result",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "HumanResult",
					"Docs": "",
					"Typewords": [
						"string"
					]
				}
			]
		},
		{
			"Name": "SPFAuthResult",
			"Docs": "",
			"Fields": [
				{
					"Name": "Domain",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Scope",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Result",
					"Docs": "",
					"Typewords": [
						"string"
					]
				}
			]
		},
		{
			"Name": "DMARCSummary",
			"Docs": "DMARCSummary presents DMARC aggregate reporting statistics for a single domain\nover a period.",
			"Fields": [
				{
					"Name": "Domain",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Total",
					"Docs": "",
					"Typewords": [
						"int32"
					]
				},
				{
					"Name": "DispositionNone",
					"Docs": "",
					"Typewords": [
						"int32"
					]
				},
				{
					"Name": "DispositionQuarantine",
					"Docs": "",
					"Typewords": [
						"int32"
					]
				},
				{
					"Name": "DispositionReject",
					"Docs": "",
					"Typewords": [
						"int32"
					]
				},
				{
					"Name": "DKIMFail",
					"Docs": "",
					"Typewords": [
						"int32"
					]
				},
				{
					"Name": "SPFFail",
					"Docs": "",
					"Typewords": [
						"int32"
					]
				},
				{
					"Name": "PolicyOverrides",
					"Docs": "",
					"Typewords": [
						"{}",
						"int32"
					]
				}
			]
		},
		{
			"Name": "Reverse",
			"Docs": "Reverse is the result of a reverse lookup.",
			"Fields": [
				{
					"Name": "Hostnames",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				}
			]
		},
		{
			"Name": "ClientConfigs",
			"Docs": "ClientConfigs holds the client configuration for IMAP/Submission for a\ndomain.",
			"Fields": [
				{
					"Name": "Entries",
					"Docs": "",
					"Typewords": [
						"[]",
						"ClientConfigsEntry"
					]
				}
			]
		},
		{
			"Name": "ClientConfigsEntry",
			"Docs": "",
			"Fields": [
				{
					"Name": "Protocol",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Host",
					"Docs": "",
					"Typewords": [
						"Domain"
					]
				},
				{
					"Name": "Port",
					"Docs": "",
					"Typewords": [
						"int32"
					]
				},
				{
					"Name": "Listener",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Note",
					"Docs": "",
					"Typewords": [
						"string"
					]
				}
			]
		},
		{
			"Name": "HoldRule",
			"Docs": "HoldRule is a set of conditions that cause a matching message to be marked as on\nhold when it is queued. All-empty conditions matches all messages, effectively\npausing the entire queue.",
			"Fields": [
				{
					"Name": "ID",
					"Docs": "",
					"Typewords": [
						"int64"
					]
				},
				{
					"Name": "Account",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "SenderDomain",
					"Docs": "",
					"Typewords": [
						"Domain"
					]
				},
				{
					"Name": "RecipientDomain",
					"Docs": "",
					"Typewords": [
						"Domain"
					]
				},
				{
					"Name": "SenderDomainStr",
					"Docs": "Unicode.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "RecipientDomainStr",
					"Docs": "Unicode.",
					"Typewords": [
						"string"
					]
				}
			]
		},
		{
			"Name": "Filter",
			"Docs": "Filter filters messages to list or operate on. Used by admin web interface\nand cli.\n\nOnly non-empty/non-zero values are applied to the filter. Leaving all fields\nempty/zero matches all messages.",
			"Fields": [
				{
					"Name": "Max",
					"Docs": "",
					"Typewords": [
						"int32"
					]
				},
				{
					"Name": "IDs",
					"Docs": "",
					"Typewords": [
						"[]",
						"int64"
					]
				},
				{
					"Name": "Account",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "From",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "To",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Hold",
					"Docs": "",
					"Typewords": [
						"nullable",
						"bool"
					]
				},
				{
					"Name": "Submitted",
					"Docs": "Whether submitted before/after a time relative to now. \"\u003e$duration\" or \"\u003c$duration\", also with \"now\" for duration.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "NextAttempt",
					"Docs": "\"\u003e$duration\" or \"\u003c$duration\", also with \"now\" for duration.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Transport",
					"Docs": "",
					"Typewords": [
						"nullable",
						"string"
					]
				}
			]
		},
		{
			"Name": "Sort",
			"Docs": "",
			"Fields": [
				{
					"Name": "Field",
					"Docs": "\"Queued\" or \"NextAttempt\"/\"\".",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "LastID",
					"Docs": "If \u003e 0, we return objects beyond this, less/greater depending on Asc.",
					"Typewords": [
						"int64"
					]
				},
				{
					"Name": "Last",
					"Docs": "Value of Field for last object. Must be set iff LastID is set.",
					"Typewords": [
						"any"
					]
				},
				{
					"Name": "Asc",
					"Docs": "Ascending, or descending.",
					"Typewords": [
						"bool"
					]
				}
			]
		},
		{
			"Name": "Msg",
			"Docs": "Msg is a message in the queue.\n\nUse MakeMsg to make a message with fields that Add needs. Add will further set\nqueueing related fields.",
			"Fields": [
				{
					"Name": "ID",
					"Docs": "",
					"Typewords": [
						"int64"
					]
				},
				{
					"Name": "BaseID",
					"Docs": "A message for multiple recipients will get a BaseID that is identical to the first Msg.ID queued. The message contents will be identical for each recipient, including MsgPrefix. If other properties are identical too, including recipient domain, multiple Msgs may be delivered in a single SMTP transaction. For messages with a single recipient, this field will be 0.",
					"Typewords": [
						"int64"
					]
				},
				{
					"Name": "Queued",
					"Docs": "",
					"Typewords": [
						"timestamp"
					]
				},
				{
					"Name": "Hold",
					"Docs": "If set, delivery won't be attempted.",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "SenderAccount",
					"Docs": "Failures are delivered back to this local account. Also used for routing.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "SenderLocalpart",
					"Docs": "Should be a local user and domain.",
					"Typewords": [
						"Localpart"
					]
				},
				{
					"Name": "SenderDomain",
					"Docs": "",
					"Typewords": [
						"IPDomain"
					]
				},
				{
					"Name": "SenderDomainStr",
					"Docs": "For filtering, unicode.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "FromID",
					"Docs": "For transactional messages, used to match later DSNs.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "RecipientLocalpart",
					"Docs": "Typically a remote user and domain.",
					"Typewords": [
						"Localpart"
					]
				},
				{
					"Name": "RecipientDomain",
					"Docs": "",
					"Typewords": [
						"IPDomain"
					]
				},
				{
					"Name": "RecipientDomainStr",
					"Docs": "For filtering, unicode domain. Can also contain ip enclosed in [].",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Attempts",
					"Docs": "Next attempt is based on last attempt and exponential back off based on attempts.",
					"Typewords": [
						"int32"
					]
				},
				{
					"Name": "MaxAttempts",
					"Docs": "Max number of attempts before giving up. If 0, then the default of 8 attempts is used instead.",
					"Typewords": [
						"int32"
					]
				},
				{
					"Name": "DialedIPs",
					"Docs": "For each host, the IPs that were dialed. Used for IP selection for later attempts.",
					"Typewords": [
						"{}",
						"[]",
						"IP"
					]
				},
				{
					"Name": "NextAttempt",
					"Docs": "For scheduling.",
					"Typewords": [
						"timestamp"
					]
				},
				{
					"Name": "LastAttempt",
					"Docs": "",
					"Typewords": [
						"nullable",
						"timestamp"
					]
				},
				{
					"Name": "Results",
					"Docs": "",
					"Typewords": [
						"[]",
						"MsgResult"
					]
				},
				{
					"Name": "Has8bit",
					"Docs": "Whether message contains bytes with high bit set, determines whether 8BITMIME SMTP extension is needed.",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "SMTPUTF8",
					"Docs": "Whether message requires use of SMTPUTF8.",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "IsDMARCReport",
					"Docs": "Delivery failures for DMARC reports are handled differently.",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "IsTLSReport",
					"Docs": "Delivery failures for TLS reports are handled differently.",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "Size",
					"Docs": "Full size of message, combined MsgPrefix with contents of message file.",
					"Typewords": [
						"int64"
					]
				},
				{
					"Name": "MessageID",
					"Docs": "Message-ID header, including \u003c\u003e. Used when composing a DSN, in its References header.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "MsgPrefix",
					"Docs": "Data to send before the contents from the file, typically with headers like DKIM-Signature.",
					"Typewords": [
						"[]",
						"uint8"
					]
				},
				{
					"Name": "Subject",
					"Docs": "For context about delivery.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "DSNUTF8",
					"Docs": "If set, this message is a DSN and this is a version using utf-8, for the case the remote MTA supports smtputf8. In this case, Size and MsgPrefix are not relevant.",
					"Typewords": [
						"[]",
						"uint8"
					]
				},
				{
					"Name": "Transport",
					"Docs": "If non-empty, the transport to use for this message. Can be set through cli or admin interface. If empty (the default for a submitted message), regular routing rules apply.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "RequireTLS",
					"Docs": "RequireTLS influences TLS verification during delivery.  If nil, the recipient domain policy is followed (MTA-STS and/or DANE), falling back to optional opportunistic non-verified STARTTLS.  If RequireTLS is true (through SMTP REQUIRETLS extension or webmail submit), MTA-STS or DANE is required, as well as REQUIRETLS support by the next hop server.  If RequireTLS is false (through messag header \"TLS-Required: No\"), the recipient domain's policy is ignored if it does not lead to a successful TLS connection, i.e. falling back to SMTP delivery with unverified STARTTLS or plain text.",
					"Typewords": [
						"nullable",
						"bool"
					]
				},
				{
					"Name": "FutureReleaseRequest",
					"Docs": "For DSNs, where the original FUTURERELEASE value must be included as per-message field. This field should be of the form \"for;\" plus interval, or \"until;\" plus utc date-time.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Extra",
					"Docs": "Extra information, for transactional email.",
					"Typewords": [
						"{}",
						"string"
					]
				}
			]
		},
		{
			"Name": "IPDomain",
			"Docs": "IPDomain is an ip address, a domain, or empty.",
			"Fields": [
				{
					"Name": "IP",
					"Docs": "",
					"Typewords": [
						"IP"
					]
				},
				{
					"Name": "Domain",
					"Docs": "",
					"Typewords": [
						"Domain"
					]
				}
			]
		},
		{
			"Name": "MsgResult",
			"Docs": "MsgResult is the result (or work in progress) of a delivery attempt.",
			"Fields": [
				{
					"Name": "Start",
					"Docs": "",
					"Typewords": [
						"timestamp"
					]
				},
				{
					"Name": "Duration",
					"Docs": "",
					"Typewords": [
						"int64"
					]
				},
				{
					"Name": "Success",
					"Docs": "",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "Code",
					"Docs": "",
					"Typewords": [
						"int32"
					]
				},
				{
					"Name": "Secode",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Error",
					"Docs": "",
					"Typewords": [
						"string"
					]
				}
			]
		},
		{
			"Name": "RetiredFilter",
			"Docs": "RetiredFilter filters messages to list or operate on. Used by admin web interface\nand cli.\n\nOnly non-empty/non-zero values are applied to the filter. Leaving all fields\nempty/zero matches all messages.",
			"Fields": [
				{
					"Name": "Max",
					"Docs": "",
					"Typewords": [
						"int32"
					]
				},
				{
					"Name": "IDs",
					"Docs": "",
					"Typewords": [
						"[]",
						"int64"
					]
				},
				{
					"Name": "Account",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "From",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "To",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Submitted",
					"Docs": "Whether submitted before/after a time relative to now. \"\u003e$duration\" or \"\u003c$duration\", also with \"now\" for duration.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "LastActivity",
					"Docs": "\"\u003e$duration\" or \"\u003c$duration\", also with \"now\" for duration.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Transport",
					"Docs": "",
					"Typewords": [
						"nullable",
						"string"
					]
				},
				{
					"Name": "Success",
					"Docs": "",
					"Typewords": [
						"nullable",
						"bool"
					]
				}
			]
		},
		{
			"Name": "RetiredSort",
			"Docs": "",
			"Fields": [
				{
					"Name": "Field",
					"Docs": "\"Queued\" or \"LastActivity\"/\"\".",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "LastID",
					"Docs": "If \u003e 0, we return objects beyond this, less/greater depending on Asc.",
					"Typewords": [
						"int64"
					]
				},
				{
					"Name": "Last",
					"Docs": "Value of Field for last object. Must be set iff LastID is set.",
					"Typewords": [
						"any"
					]
				},
				{
					"Name": "Asc",
					"Docs": "Ascending, or descending.",
					"Typewords": [
						"bool"
					]
				}
			]
		},
		{
			"Name": "MsgRetired",
			"Docs": "MsgRetired is a message for which delivery completed, either successful,\nfailed/canceled. Retired messages are only stored if so configured, and will be\ncleaned up after the configured period.",
			"Fields": [
				{
					"Name": "ID",
					"Docs": "Same ID as it was as Msg.ID.",
					"Typewords": [
						"int64"
					]
				},
				{
					"Name": "BaseID",
					"Docs": "",
					"Typewords": [
						"int64"
					]
				},
				{
					"Name": "Queued",
					"Docs": "",
					"Typewords": [
						"timestamp"
					]
				},
				{
					"Name": "SenderAccount",
					"Docs": "Failures are delivered back to this local account. Also used for routing.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "SenderLocalpart",
					"Docs": "Should be a local user and domain.",
					"Typewords": [
						"Localpart"
					]
				},
				{
					"Name": "SenderDomainStr",
					"Docs": "For filtering, unicode.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "FromID",
					"Docs": "Used to match DSNs.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "RecipientLocalpart",
					"Docs": "Typically a remote user and domain.",
					"Typewords": [
						"Localpart"
					]
				},
				{
					"Name": "RecipientDomain",
					"Docs": "",
					"Typewords": [
						"IPDomain"
					]
				},
				{
					"Name": "RecipientDomainStr",
					"Docs": "For filtering, unicode.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Attempts",
					"Docs": "Next attempt is based on last attempt and exponential back off based on attempts.",
					"Typewords": [
						"int32"
					]
				},
				{
					"Name": "MaxAttempts",
					"Docs": "Max number of attempts before giving up. If 0, then the default of 8 attempts is used instead.",
					"Typewords": [
						"int32"
					]
				},
				{
					"Name": "DialedIPs",
					"Docs": "For each host, the IPs that were dialed. Used for IP selection for later attempts.",
					"Typewords": [
						"{}",
						"[]",
						"IP"
					]
				},
				{
					"Name": "LastAttempt",
					"Docs": "",
					"Typewords": [
						"nullable",
						"timestamp"
					]
				},
				{
					"Name": "Results",
					"Docs": "",
					"Typewords": [
						"[]",
						"MsgResult"
					]
				},
				{
					"Name": "Has8bit",
					"Docs": "Whether message contains bytes with high bit set, determines whether 8BITMIME SMTP extension is needed.",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "SMTPUTF8",
					"Docs": "Whether message requires use of SMTPUTF8.",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "IsDMARCReport",
					"Docs": "Delivery failures for DMARC reports are handled differently.",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "IsTLSReport",
					"Docs": "Delivery failures for TLS reports are handled differently.",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "Size",
					"Docs": "Full size of message, combined MsgPrefix with contents of message file.",
					"Typewords": [
						"int64"
					]
				},
				{
					"Name": "MessageID",
					"Docs": "Used when composing a DSN, in its References header.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Subject",
					"Docs": "For context about delivery.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Transport",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "RequireTLS",
					"Docs": "",
					"Typewords": [
						"nullable",
						"bool"
					]
				},
				{
					"Name": "FutureReleaseRequest",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Extra",
					"Docs": "Extra information, for transactional email.",
					"Typewords": [
						"{}",
						"string"
					]
				},
				{
					"Name": "LastActivity",
					"Docs": "",
					"Typewords": [
						"timestamp"
					]
				},
				{
					"Name": "RecipientAddress",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Success",
					"Docs": "Whether delivery to next hop succeeded.",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "KeepUntil",
					"Docs": "",
					"Typewords": [
						"timestamp"
					]
				}
			]
		},
		{
			"Name": "HookFilter",
			"Docs": "HookFilter filters messages to list or operate on. Used by admin web interface\nand cli.\n\nOnly non-empty/non-zero values are applied to the filter. Leaving all fields\nempty/zero matches all hooks.",
			"Fields": [
				{
					"Name": "Max",
					"Docs": "",
					"Typewords": [
						"int32"
					]
				},
				{
					"Name": "IDs",
					"Docs": "",
					"Typewords": [
						"[]",
						"int64"
					]
				},
				{
					"Name": "Account",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Submitted",
					"Docs": "Whether submitted before/after a time relative to now. \"\u003e$duration\" or \"\u003c$duration\", also with \"now\" for duration.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "NextAttempt",
					"Docs": "\"\u003e$duration\" or \"\u003c$duration\", also with \"now\" for duration.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Event",
					"Docs": "Including \"incoming\".",
					"Typewords": [
						"string"
					]
				}
			]
		},
		{
			"Name": "HookSort",
			"Docs": "",
			"Fields": [
				{
					"Name": "Field",
					"Docs": "\"Queued\" or \"NextAttempt\"/\"\".",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "LastID",
					"Docs": "If \u003e 0, we return objects beyond this, less/greater depending on Asc.",
					"Typewords": [
						"int64"
					]
				},
				{
					"Name": "Last",
					"Docs": "Value of Field for last object. Must be set iff LastID is set.",
					"Typewords": [
						"any"
					]
				},
				{
					"Name": "Asc",
					"Docs": "Ascending, or descending.",
					"Typewords": [
						"bool"
					]
				}
			]
		},
		{
			"Name": "Hook",
			"Docs": "Hook is a webhook call about a delivery. We'll try delivering with backoff until we succeed or fail.",
			"Fields": [
				{
					"Name": "ID",
					"Docs": "",
					"Typewords": [
						"int64"
					]
				},
				{
					"Name": "QueueMsgID",
					"Docs": "Original queue Msg/MsgRetired ID. Zero for hooks for incoming messages.",
					"Typewords": [
						"int64"
					]
				},
				{
					"Name": "FromID",
					"Docs": "As generated by us and returned in webapi call. Can be empty, for incoming messages to our base address.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "MessageID",
					"Docs": "Of outgoing or incoming messages. Includes \u003c\u003e.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Subject",
					"Docs": "Subject of original outgoing message, or of incoming message.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Extra",
					"Docs": "From submitted message.",
					"Typewords": [
						"{}",
						"string"
					]
				},
				{
					"Name": "Account",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "URL",
					"Docs": "Taken from config when webhook is scheduled.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Authorization",
					"Docs": "Optional value for authorization header to include in HTTP request.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "IsIncoming",
					"Docs": "",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "OutgoingEvent",
					"Docs": "Empty string if not outgoing.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Payload",
					"Docs": "JSON data to be submitted.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Submitted",
					"Docs": "",
					"Typewords": [
						"timestamp"
					]
				},
				{
					"Name": "Attempts",
					"Docs": "",
					"Typewords": [
						"int32"
					]
				},
				{
					"Name": "NextAttempt",
					"Docs": "Index for fast scheduling.",
					"Typewords": [
						"timestamp"
					]
				},
				{
					"Name": "Results",
					"Docs": "",
					"Typewords": [
						"[]",
						"HookResult"
					]
				}
			]
		},
		{
			"Name": "HookResult",
			"Docs": "HookResult is the result of a single attempt to deliver a webhook.",
			"Fields": [
				{
					"Name": "Start",
					"Docs": "",
					"Typewords": [
						"timestamp"
					]
				},
				{
					"Name": "Duration",
					"Docs": "",
					"Typewords": [
						"int64"
					]
				},
				{
					"Name": "URL",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Success",
					"Docs": "",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "Code",
					"Docs": "eg 200, 404, 500. 2xx implies success.",
					"Typewords": [
						"int32"
					]
				},
				{
					"Name": "Error",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Response",
					"Docs": "Max 512 bytes of HTTP response body.",
					"Typewords": [
						"string"
					]
				}
			]
		},
		{
			"Name": "HookRetiredFilter",
			"Docs": "HookRetiredFilter filters messages to list or operate on. Used by admin web interface\nand cli.\n\nOnly non-empty/non-zero values are applied to the filter. Leaving all fields\nempty/zero matches all hooks.",
			"Fields": [
				{
					"Name": "Max",
					"Docs": "",
					"Typewords": [
						"int32"
					]
				},
				{
					"Name": "IDs",
					"Docs": "",
					"Typewords": [
						"[]",
						"int64"
					]
				},
				{
					"Name": "Account",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Submitted",
					"Docs": "Whether submitted before/after a time relative to now. \"\u003e$duration\" or \"\u003c$duration\", also with \"now\" for duration.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "LastActivity",
					"Docs": "\"\u003e$duration\" or \"\u003c$duration\", also with \"now\" for duration.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Event",
					"Docs": "Including \"incoming\".",
					"Typewords": [
						"string"
					]
				}
			]
		},
		{
			"Name": "HookRetiredSort",
			"Docs": "",
			"Fields": [
				{
					"Name": "Field",
					"Docs": "\"Queued\" or \"LastActivity\"/\"\".",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "LastID",
					"Docs": "If \u003e 0, we return objects beyond this, less/greater depending on Asc.",
					"Typewords": [
						"int64"
					]
				},
				{
					"Name": "Last",
					"Docs": "Value of Field for last object. Must be set iff LastID is set.",
					"Typewords": [
						"any"
					]
				},
				{
					"Name": "Asc",
					"Docs": "Ascending, or descending.",
					"Typewords": [
						"bool"
					]
				}
			]
		},
		{
			"Name": "HookRetired",
			"Docs": "HookRetired is a Hook that was delivered/failed/canceled and kept according\nto the configuration.",
			"Fields": [
				{
					"Name": "ID",
					"Docs": "Same as original Hook.ID.",
					"Typewords": [
						"int64"
					]
				},
				{
					"Name": "QueueMsgID",
					"Docs": "Original queue Msg or MsgRetired ID. Zero for hooks for incoming messages.",
					"Typewords": [
						"int64"
					]
				},
				{
					"Name": "FromID",
					"Docs": "As generated by us and returned in webapi call. Can be empty, for incoming messages to our base address.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "MessageID",
					"Docs": "Of outgoing or incoming messages. Includes \u003c\u003e.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Subject",
					"Docs": "Subject of original outgoing message, or of incoming message.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Extra",
					"Docs": "From submitted message.",
					"Typewords": [
						"{}",
						"string"
					]
				},
				{
					"Name": "Account",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "URL",
					"Docs": "Taken from config at start of each attempt.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Authorization",
					"Docs": "Whether request had authorization without keeping it around.",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "IsIncoming",
					"Docs": "",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "OutgoingEvent",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Payload",
					"Docs": "JSON data submitted.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Submitted",
					"Docs": "",
					"Typewords": [
						"timestamp"
					]
				},
				{
					"Name": "SupersededByID",
					"Docs": "If not 0, a Hook.ID that superseded this one and Done will be true.",
					"Typewords": [
						"int64"
					]
				},
				{
					"Name": "Attempts",
					"Docs": "",
					"Typewords": [
						"int32"
					]
				},
				{
					"Name": "Results",
					"Docs": "",
					"Typewords": [
						"[]",
						"HookResult"
					]
				},
				{
					"Name": "Success",
					"Docs": "",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "LastActivity",
					"Docs": "",
					"Typewords": [
						"timestamp"
					]
				},
				{
					"Name": "KeepUntil",
					"Docs": "",
					"Typewords": [
						"timestamp"
					]
				}
			]
		},
		{
			"Name": "WebserverConfig",
			"Docs": "WebserverConfig is the combination of WebDomainRedirects and WebHandlers\nfrom the domains.conf configuration file.",
			"Fields": [
				{
					"Name": "WebDNSDomainRedirects",
					"Docs": "From server to frontend.",
					"Typewords": [
						"[]",
						"[]",
						"Domain"
					]
				},
				{
					"Name": "WebDomainRedirects",
					"Docs": "From frontend to server, it's not convenient to create dns.Domain in the frontend.",
					"Typewords": [
						"[]",
						"[]",
						"string"
					]
				},
				{
					"Name": "WebHandlers",
					"Docs": "",
					"Typewords": [
						"[]",
						"WebHandler"
					]
				}
			]
		},
		{
			"Name": "WebHandler",
			"Docs": "",
			"Fields": [
				{
					"Name": "LogName",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Domain",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "PathRegexp",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "DontRedirectPlainHTTP",
					"Docs": "",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "Compress",
					"Docs": "",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "WebStatic",
					"Docs": "",
					"Typewords": [
						"nullable",
						"WebStatic"
					]
				},
				{
					"Name": "WebRedirect",
					"Docs": "",
					"Typewords": [
						"nullable",
						"WebRedirect"
					]
				},
				{
					"Name": "WebForward",
					"Docs": "",
					"Typewords": [
						"nullable",
						"WebForward"
					]
				},
				{
					"Name": "WebInternal",
					"Docs": "",
					"Typewords": [
						"nullable",
						"WebInternal"
					]
				},
				{
					"Name": "Name",
					"Docs": "Either LogName, or numeric index if LogName was empty. Used instead of LogName in logging/metrics.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "DNSDomain",
					"Docs": "",
					"Typewords": [
						"Domain"
					]
				}
			]
		},
		{
			"Name": "WebStatic",
			"Docs": "",
			"Fields": [
				{
					"Name": "StripPrefix",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Root",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "ListFiles",
					"Docs": "",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "ContinueNotFound",
					"Docs": "",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "ResponseHeaders",
					"Docs": "",
					"Typewords": [
						"{}",
						"string"
					]
				}
			]
		},
		{
			"Name": "WebRedirect",
			"Docs": "",
			"Fields": [
				{
					"Name": "BaseURL",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "OrigPathRegexp",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "ReplacePath",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "StatusCode",
					"Docs": "",
					"Typewords": [
						"int32"
					]
				}
			]
		},
		{
			"Name": "WebForward",
			"Docs": "",
			"Fields": [
				{
					"Name": "StripPath",
					"Docs": "",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "URL",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "ResponseHeaders",
					"Docs": "",
					"Typewords": [
						"{}",
						"string"
					]
				}
			]
		},
		{
			"Name": "WebInternal",
			"Docs": "",
			"Fields": [
				{
					"Name": "BasePath",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Service",
					"Docs": "",
					"Typewords": [
						"string"
					]
				}
			]
		},
		{
			"Name": "Transport",
			"Docs": "Transport is a method to delivery a message. At most one of the fields can\nbe non-nil. The non-nil field represents the type of transport. For a\ntransport with all fields nil, regular email delivery is done.",
			"Fields": [
				{
					"Name": "Submissions",
					"Docs": "",
					"Typewords": [
						"nullable",
						"TransportSMTP"
					]
				},
				{
					"Name": "Submission",
					"Docs": "",
					"Typewords": [
						"nullable",
						"TransportSMTP"
					]
				},
				{
					"Name": "SMTP",
					"Docs": "",
					"Typewords": [
						"nullable",
						"TransportSMTP"
					]
				},
				{
					"Name": "Socks",
					"Docs": "",
					"Typewords": [
						"nullable",
						"TransportSocks"
					]
				},
				{
					"Name": "Direct",
					"Docs": "",
					"Typewords": [
						"nullable",
						"TransportDirect"
					]
				}
			]
		},
		{
			"Name": "TransportSMTP",
			"Docs": "TransportSMTP delivers messages by \"submission\" (SMTP, typically\nauthenticated) to the queue of a remote host (smarthost), or by relaying\n(SMTP, typically unauthenticated).",
			"Fields": [
				{
					"Name": "Host",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Port",
					"Docs": "",
					"Typewords": [
						"int32"
					]
				},
				{
					"Name": "STARTTLSInsecureSkipVerify",
					"Docs": "",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "NoSTARTTLS",
					"Docs": "",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "Auth",
					"Docs": "",
					"Typewords": [
						"nullable",
						"SMTPAuth"
					]
				}
			]
		},
		{
			"Name": "SMTPAuth",
			"Docs": "SMTPAuth hold authentication credentials used when delivering messages\nthrough a smarthost.",
			"Fields": [
				{
					"Name": "Username",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Password",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Mechanisms",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				}
			]
		},
		{
			"Name": "TransportSocks",
			"Docs": "",
			"Fields": [
				{
					"Name": "Address",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "RemoteIPs",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "RemoteHostname",
					"Docs": "",
					"Typewords": [
						"string"
					]
				}
			]
		},
		{
			"Name": "TransportDirect",
			"Docs": "",
			"Fields": [
				{
					"Name": "DisableIPv4",
					"Docs": "",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "DisableIPv6",
					"Docs": "",
					"Typewords": [
						"bool"
					]
				}
			]
		},
		{
			"Name": "EvaluationStat",
			"Docs": "EvaluationStat summarizes stored evaluations, for inclusion in an upcoming\naggregate report, for a domain.",
			"Fields": [
				{
					"Name": "Domain",
					"Docs": "",
					"Typewords": [
						"Domain"
					]
				},
				{
					"Name": "Dispositions",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "Count",
					"Docs": "",
					"Typewords": [
						"int32"
					]
				},
				{
					"Name": "SendReport",
					"Docs": "",
					"Typewords": [
						"bool"
					]
				}
			]
		},
		{
			"Name": "Evaluation",
			"Docs": "Evaluation is the result of an evaluation of a DMARC policy, to be included\nin a DMARC report.",
			"Fields": [
				{
					"Name": "ID",
					"Docs": "",
					"Typewords": [
						"int64"
					]
				},
				{
					"Name": "PolicyDomain",
					"Docs": "Domain where DMARC policy was found, could be the organizational domain while evaluation was for a subdomain. Unicode. Same as domain found in PolicyPublished. A separate field for its index.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Evaluated",
					"Docs": "Time of evaluation, determines which report (covering whole hours) this evaluation will be included in.",
					"Typewords": [
						"timestamp"
					]
				},
				{
					"Name": "Optional",
					"Docs": "If optional, this evaluation is not a reason to send a DMARC report, but it will be included when a report is sent due to other non-optional evaluations. Set for evaluations of incoming DMARC reports. We don't want such deliveries causing us to send a report, or we would keep exchanging reporting messages forever. Also set for when evaluation is a DMARC reject for domains we haven't positively interacted with, to prevent being used to flood an unsuspecting domain with reports.",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "IntervalHours",
					"Docs": "Effective aggregate reporting interval in hours. Between 1 and 24, rounded up from seconds from policy to first number that can divide 24.",
					"Typewords": [
						"int32"
					]
				},
				{
					"Name": "Addresses",
					"Docs": "\"rua\" in DMARC record, we only store evaluations for records with aggregate reporting addresses, so always non-empty.",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "PolicyPublished",
					"Docs": "Policy used for evaluation. We don't store the \"fo\" field for failure reporting options, since we don't send failure reports for individual messages.",
					"Typewords": [
						"PolicyPublished"
					]
				},
				{
					"Name": "SourceIP",
					"Docs": "For \"row\" in a report record.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Disposition",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "AlignedDKIMPass",
					"Docs": "",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "AlignedSPFPass",
					"Docs": "",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "OverrideReasons",
					"Docs": "",
					"Typewords": [
						"[]",
						"PolicyOverrideReason"
					]
				},
				{
					"Name": "EnvelopeTo",
					"Docs": "For \"identifiers\" in a report record.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "EnvelopeFrom",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "HeaderFrom",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "DKIMResults",
					"Docs": "For \"auth_results\" in a report record.",
					"Typewords": [
						"[]",
						"DKIMAuthResult"
					]
				},
				{
					"Name": "SPFResults",
					"Docs": "",
					"Typewords": [
						"[]",
						"SPFAuthResult"
					]
				}
			]
		},
		{
			"Name": "SuppressAddress",
			"Docs": "SuppressAddress is a reporting address for which outgoing DMARC reports\nwill be suppressed for a period.",
			"Fields": [
				{
					"Name": "ID",
					"Docs": "",
					"Typewords": [
						"int64"
					]
				},
				{
					"Name": "Inserted",
					"Docs": "",
					"Typewords": [
						"timestamp"
					]
				},
				{
					"Name": "ReportingAddress",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Until",
					"Docs": "",
					"Typewords": [
						"timestamp"
					]
				},
				{
					"Name": "Comment",
					"Docs": "",
					"Typewords": [
						"string"
					]
				}
			]
		},
		{
			"Name": "TLSResult",
			"Docs": "TLSResult is stored in the database to track TLS results per policy domain, day\nand recipient domain. These records will be included in TLS reports.",
			"Fields": [
				{
					"Name": "ID",
					"Docs": "",
					"Typewords": [
						"int64"
					]
				},
				{
					"Name": "PolicyDomain",
					"Docs": "Domain potentially with TLSRPT DNS record, with addresses that will receive reports. Either a recipient domain (for MTA-STS policies) or an (MX) host (for DANE policies). Unicode.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "DayUTC",
					"Docs": "DayUTC is of the form yyyymmdd.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "RecipientDomain",
					"Docs": "Reports are sent per recipient domain and per MX host. For reports to a recipient domain, we type send a result for MTA-STS and one or more MX host (DANE) results. Unicode.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Created",
					"Docs": "",
					"Typewords": [
						"timestamp"
					]
				},
				{
					"Name": "Updated",
					"Docs": "",
					"Typewords": [
						"timestamp"
					]
				},
				{
					"Name": "IsHost",
					"Docs": "Result is for MX host (DANE), not recipient domain (MTA-STS).",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "SendReport",
					"Docs": "Whether to send a report. TLS results for delivering messages with TLS reports will be recorded, but will not cause a report to be sent.",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "SentToRecipientDomain",
					"Docs": "Set after sending to recipient domain, before sending results to policy domain (after which the record is removed).",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "RecipientDomainReportingAddresses",
					"Docs": "Reporting addresses from the recipient domain TLSRPT record, not necessarily those we sent to (e.g. due to failure). Used to leave results to MX target (DANE) policy domains out that were already sent in the report to the recipient domain, so we don't report twice.",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "SentToPolicyDomain",
					"Docs": "Set after sending report to policy domain.",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "Results",
					"Docs": "Results is updated for each TLS attempt.",
					"Typewords": [
						"[]",
						"Result"
					]
				}
			]
		},
		{
			"Name": "TLSRPTSuppressAddress",
			"Docs": "SuppressAddress is a reporting address for which outgoing TLS reports\nwill be suppressed for a period.",
			"Fields": [
				{
					"Name": "ID",
					"Docs": "",
					"Typewords": [
						"int64"
					]
				},
				{
					"Name": "Inserted",
					"Docs": "",
					"Typewords": [
						"timestamp"
					]
				},
				{
					"Name": "ReportingAddress",
					"Docs": "",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Until",
					"Docs": "",
					"Typewords": [
						"timestamp"
					]
				},
				{
					"Name": "Comment",
					"Docs": "",
					"Typewords": [
						"string"
					]
				}
			]
		},
		{
			"Name": "Dynamic",
			"Docs": "Dynamic is the parsed form of domains.conf, and is automatically reloaded when changed.",
			"Fields": [
				{
					"Name": "Domains",
					"Docs": "",
					"Typewords": [
						"{}",
						"ConfigDomain"
					]
				},
				{
					"Name": "Accounts",
					"Docs": "",
					"Typewords": [
						"{}",
						"Account"
					]
				},
				{
					"Name": "WebDomainRedirects",
					"Docs": "",
					"Typewords": [
						"{}",
						"string"
					]
				},
				{
					"Name": "WebHandlers",
					"Docs": "",
					"Typewords": [
						"[]",
						"WebHandler"
					]
				},
				{
					"Name": "Routes",
					"Docs": "",
					"Typewords": [
						"[]",
						"Route"
					]
				},
				{
					"Name": "MonitorDNSBLs",
					"Docs": "",
					"Typewords": [
						"[]",
						"string"
					]
				},
				{
					"Name": "MonitorDNSBLZones",
					"Docs": "",
					"Typewords": [
						"[]",
						"Domain"
					]
				}
			]
		},
		{
			"Name": "TLSPublicKey",
			"Docs": "TLSPublicKey is a public key for use with TLS client authentication based on the\npublic key of the certificate.",
			"Fields": [
				{
					"Name": "Fingerprint",
					"Docs": "Raw-url-base64-encoded Subject Public Key Info of certificate.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Created",
					"Docs": "",
					"Typewords": [
						"timestamp"
					]
				},
				{
					"Name": "Type",
					"Docs": "E.g. \"rsa-2048\", \"ecdsa-p256\", \"ed25519\"",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "Name",
					"Docs": "Descriptive name to identify the key, e.g. the device where key is used.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "NoIMAPPreauth",
					"Docs": "If set, new immediate authenticated TLS connections are not moved to \"authenticated\" state. For clients that don't understand it, and will try an authenticate command anyway.",
					"Typewords": [
						"bool"
					]
				},
				{
					"Name": "CertDER",
					"Docs": "",
					"Typewords": [
						"[]",
						"uint8"
					]
				},
				{
					"Name": "Account",
					"Docs": "Key authenticates this account.",
					"Typewords": [
						"string"
					]
				},
				{
					"Name": "LoginAddress",
					"Docs": "Must belong to account.",
					"Typewords": [
						"string"
					]
				}
			]
		}
	],
	"Ints": [],
	"Strings": [
		{
			"Name": "CSRFToken",
			"Docs": "",
			"Values": null
		},
		{
			"Name": "DMARCPolicy",
			"Docs": "Policy as used in DMARC DNS record for \"p=\" or \"sp=\".",
			"Values": [
				{
					"Name": "PolicyEmpty",
					"Value": "",
					"Docs": "Only for the optional Record.SubdomainPolicy."
				},
				{
					"Name": "PolicyNone",
					"Value": "none",
					"Docs": ""
				},
				{
					"Name": "PolicyQuarantine",
					"Value": "quarantine",
					"Docs": ""
				},
				{
					"Name": "PolicyReject",
					"Value": "reject",
					"Docs": ""
				}
			]
		},
		{
			"Name": "Align",
			"Docs": "Align specifies the required alignment of a domain name.",
			"Values": [
				{
					"Name": "AlignStrict",
					"Value": "s",
					"Docs": "Strict requires an exact domain name match."
				},
				{
					"Name": "AlignRelaxed",
					"Value": "r",
					"Docs": "Relaxed requires either an exact or subdomain name match."
				}
			]
		},
		{
			"Name": "RUA",
			"Docs": "RUA is a reporting address with scheme and special characters \",\", \"!\" and\n\";\" not encoded.",
			"Values": null
		},
		{
			"Name": "Mode",
			"Docs": "Mode indicates how the policy should be interpreted.",
			"Values": [
				{
					"Name": "ModeEnforce",
					"Value": "enforce",
					"Docs": "Policy must be followed, i.e. deliveries must fail if a TLS connection cannot be made."
				},
				{
					"Name": "ModeTesting",
					"Value": "testing",
					"Docs": "In case TLS cannot be negotiated, plain SMTP can be used, but failures must be reported, e.g. with TLSRPT."
				},
				{
					"Name": "ModeNone",
					"Value": "none",
					"Docs": "In case MTA-STS is not or no longer implemented."
				}
			]
		},
		{
			"Name": "Localpart",
			"Docs": "Localpart is a decoded local part of an email address, before the \"@\".\nFor quoted strings, values do not hold the double quote or escaping backslashes.\nAn empty string can be a valid localpart.\nLocalparts are in Unicode NFC.",
			"Values": null
		},
		{
			"Name": "IP",
			"Docs": "An IP is a single IP address, a slice of bytes.\nFunctions in this package accept either 4-byte (IPv4)\nor 16-byte (IPv6) slices as input.\n\nNote that in this documentation, referring to an\nIP address as an IPv4 address or an IPv6 address\nis a semantic property of the address, not just the\nlength of the byte slice: a 16-byte slice can still\nbe an IPv4 address.",
			"Values": []
		}
	],
	"SherpaVersion": 0,
	"SherpadocVersion": 1
}
